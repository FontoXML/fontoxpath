"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Expression_1 = require("../Expression");
const SequenceFactory_1 = require("../dataTypes/SequenceFactory");
const Specificity_1 = require("../Specificity");
const createNodeValue_1 = require("../dataTypes/createNodeValue");
class AbsolutePathExpression extends Expression_1.default {
    constructor(relativePathExpression) {
        super(relativePathExpression ? relativePathExpression.specificity : new Specificity_1.default({}), relativePathExpression ? [relativePathExpression] : [], {
            resultOrder: Expression_1.default.RESULT_ORDERINGS.SORTED,
            subtree: false,
            peer: false,
            canBeStaticallyEvaluated: false
        });
        this._relativePathExpression = relativePathExpression;
    }
    evaluate(dynamicContext, executionParameters) {
        if (dynamicContext.contextItem === null) {
            throw new Error('XPDY0002: context is absent, it needs to be present to use paths.');
        }
        const node = dynamicContext.contextItem.value;
        const documentNode = node.nodeType === node.DOCUMENT_NODE ? node : node.ownerDocument;
        // Assume this is the start, so only one node
        const contextSequence = SequenceFactory_1.default.singleton(createNodeValue_1.default(documentNode));
        return this._relativePathExpression ?
            this._relativePathExpression.evaluateMaybeStatically(dynamicContext.scopeWithFocus(0, contextSequence.first(), contextSequence), executionParameters) :
            contextSequence;
    }
}
exports.default = AbsolutePathExpression;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzb2x1dGVQYXRoRXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFic29sdXRlUGF0aEV4cHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBdUM7QUFDdkMsa0VBQTJEO0FBQzNELGdEQUF5QztBQUN6QyxrRUFBMkQ7QUFFM0QsTUFBTSxzQkFBdUIsU0FBUSxvQkFBVTtJQUU5QyxZQUFZLHNCQUFrQztRQUM3QyxLQUFLLENBQ0osc0JBQXNCLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxxQkFBVyxDQUFDLEVBQUUsQ0FBQyxFQUNqRixzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ3REO1lBQ0MsV0FBVyxFQUFFLG9CQUFVLENBQUMsZ0JBQWdCLENBQUMsTUFBTTtZQUMvQyxPQUFPLEVBQUUsS0FBSztZQUNkLElBQUksRUFBRSxLQUFLO1lBQ1gsd0JBQXdCLEVBQUUsS0FBSztTQUMvQixDQUNELENBQUM7UUFFRixJQUFJLENBQUMsdUJBQXVCLEdBQUcsc0JBQXNCLENBQUM7SUFDdkQsQ0FBQztJQUVELFFBQVEsQ0FBRSxjQUFjLEVBQUUsbUJBQW1CO1FBQzVDLElBQUksY0FBYyxDQUFDLFdBQVcsS0FBSyxJQUFJLEVBQUU7WUFDeEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1NBQ3JGO1FBQ0QsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDOUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDdEYsNkNBQTZDO1FBQzdDLE1BQU0sZUFBZSxHQUFHLHlCQUFlLENBQUMsU0FBUyxDQUFDLHlCQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNqRixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyx1QkFBdUIsQ0FDbkQsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxDQUFDLEtBQUssRUFBRSxFQUFFLGVBQWUsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLENBQUMsQ0FBQztZQUNuRyxlQUFlLENBQUM7SUFDbEIsQ0FBQztDQUVEO0FBQ0Qsa0JBQWUsc0JBQXNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXhwcmVzc2lvbiBmcm9tICcuLi9FeHByZXNzaW9uJztcbmltcG9ydCBTZXF1ZW5jZUZhY3RvcnkgZnJvbSAnLi4vZGF0YVR5cGVzL1NlcXVlbmNlRmFjdG9yeSc7XG5pbXBvcnQgU3BlY2lmaWNpdHkgZnJvbSAnLi4vU3BlY2lmaWNpdHknO1xuaW1wb3J0IGNyZWF0ZU5vZGVWYWx1ZSBmcm9tICcuLi9kYXRhVHlwZXMvY3JlYXRlTm9kZVZhbHVlJztcblxuY2xhc3MgQWJzb2x1dGVQYXRoRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24ge1xuXHRfcmVsYXRpdmVQYXRoRXhwcmVzc2lvbjogRXhwcmVzc2lvbjtcblx0Y29uc3RydWN0b3IocmVsYXRpdmVQYXRoRXhwcmVzc2lvbjogRXhwcmVzc2lvbikge1xuXHRcdHN1cGVyKFxuXHRcdFx0cmVsYXRpdmVQYXRoRXhwcmVzc2lvbiA/IHJlbGF0aXZlUGF0aEV4cHJlc3Npb24uc3BlY2lmaWNpdHkgOiBuZXcgU3BlY2lmaWNpdHkoe30pLFxuXHRcdFx0cmVsYXRpdmVQYXRoRXhwcmVzc2lvbiA/IFtyZWxhdGl2ZVBhdGhFeHByZXNzaW9uXSA6IFtdLFxuXHRcdFx0e1xuXHRcdFx0XHRyZXN1bHRPcmRlcjogRXhwcmVzc2lvbi5SRVNVTFRfT1JERVJJTkdTLlNPUlRFRCxcblx0XHRcdFx0c3VidHJlZTogZmFsc2UsXG5cdFx0XHRcdHBlZXI6IGZhbHNlLFxuXHRcdFx0XHRjYW5CZVN0YXRpY2FsbHlFdmFsdWF0ZWQ6IGZhbHNlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdHRoaXMuX3JlbGF0aXZlUGF0aEV4cHJlc3Npb24gPSByZWxhdGl2ZVBhdGhFeHByZXNzaW9uO1xuXHR9XG5cblx0ZXZhbHVhdGUgKGR5bmFtaWNDb250ZXh0LCBleGVjdXRpb25QYXJhbWV0ZXJzKSB7XG5cdFx0aWYgKGR5bmFtaWNDb250ZXh0LmNvbnRleHRJdGVtID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1hQRFkwMDAyOiBjb250ZXh0IGlzIGFic2VudCwgaXQgbmVlZHMgdG8gYmUgcHJlc2VudCB0byB1c2UgcGF0aHMuJyk7XG5cdFx0fVxuXHRcdGNvbnN0IG5vZGUgPSBkeW5hbWljQ29udGV4dC5jb250ZXh0SXRlbS52YWx1ZTtcblx0XHRjb25zdCBkb2N1bWVudE5vZGUgPSBub2RlLm5vZGVUeXBlID09PSBub2RlLkRPQ1VNRU5UX05PREUgPyBub2RlIDogbm9kZS5vd25lckRvY3VtZW50O1xuXHRcdC8vIEFzc3VtZSB0aGlzIGlzIHRoZSBzdGFydCwgc28gb25seSBvbmUgbm9kZVxuXHRcdGNvbnN0IGNvbnRleHRTZXF1ZW5jZSA9IFNlcXVlbmNlRmFjdG9yeS5zaW5nbGV0b24oY3JlYXRlTm9kZVZhbHVlKGRvY3VtZW50Tm9kZSkpO1xuXHRcdHJldHVybiB0aGlzLl9yZWxhdGl2ZVBhdGhFeHByZXNzaW9uID9cblx0XHRcdHRoaXMuX3JlbGF0aXZlUGF0aEV4cHJlc3Npb24uZXZhbHVhdGVNYXliZVN0YXRpY2FsbHkoXG5cdFx0XHRcdGR5bmFtaWNDb250ZXh0LnNjb3BlV2l0aEZvY3VzKDAsIGNvbnRleHRTZXF1ZW5jZS5maXJzdCgpLCBjb250ZXh0U2VxdWVuY2UpLCBleGVjdXRpb25QYXJhbWV0ZXJzKSA6XG5cdFx0XHRjb250ZXh0U2VxdWVuY2U7XG5cdH1cblxufVxuZXhwb3J0IGRlZmF1bHQgQWJzb2x1dGVQYXRoRXhwcmVzc2lvbjtcbiJdfQ==