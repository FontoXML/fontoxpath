"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const castToType_1 = require("../../dataTypes/castToType");
const isSubtypeOf_1 = require("../../dataTypes/isSubtypeOf");
const DateTime_1 = require("../../dataTypes/valueTypes/DateTime");
const YearMonthDuration_1 = require("../../dataTypes/valueTypes/YearMonthDuration");
const DayTimeDuration_1 = require("../../dataTypes/valueTypes/DayTimeDuration");
// Use partial application to get to a comparer faster
function areBothStringOrAnyURI(a, b) {
    return (isSubtypeOf_1.default(a, 'xs:string') || isSubtypeOf_1.default(a, 'xs:anyURI')) &&
        (isSubtypeOf_1.default(b, 'xs:string') || isSubtypeOf_1.default(b, 'xs:anyURI'));
}
function generateCompareFunction(operator, typeA, typeB, dynamicContext) {
    let castFunctionForValueA = null;
    let castFunctionForValueB = null;
    if (isSubtypeOf_1.default(typeA, 'xs:untypedAtomic') && isSubtypeOf_1.default(typeB, 'xs:untypedAtomic')) {
        typeA = typeB = 'xs:string';
    }
    else if (isSubtypeOf_1.default(typeA, 'xs:untypedAtomic')) {
        castFunctionForValueA = val => castToType_1.default(val, typeB);
        typeA = typeB;
    }
    else if (isSubtypeOf_1.default(typeB, 'xs:untypedAtomic')) {
        castFunctionForValueB = val => castToType_1.default(val, typeA);
        typeB = typeA;
    }
    function applyCastFunctions(valA, valB) {
        return {
            castA: castFunctionForValueA ? castFunctionForValueA(valA) : valA,
            castB: castFunctionForValueB ? castFunctionForValueB(valB) : valB
        };
    }
    if (isSubtypeOf_1.default(typeA, 'xs:QName') && isSubtypeOf_1.default(typeB, 'xs:QName')) {
        if (operator === 'eqOp') {
            return (a, b) => {
                const { castA, castB } = applyCastFunctions(a, b);
                return castA.value.namespaceURI === castB.value.namespaceURI && castA.value.localPart === castB.value.localPart;
            };
        }
        if (operator === 'neOp') {
            return (a, b) => {
                const { castA, castB } = applyCastFunctions(a, b);
                return castA.value.namespaceURI !== castB.value.namespaceURI || castA.value.localPart !== castB.value.localPart;
            };
        }
        throw new Error('XPTY0004: Only the "eq" and "ne" comparison is defined for xs:QName');
    }
    function areBothSubtypeOf(type) {
        return isSubtypeOf_1.default(typeA, type) && isSubtypeOf_1.default(typeB, type);
    }
    if (areBothSubtypeOf('xs:boolean') ||
        areBothSubtypeOf('xs:string') ||
        areBothSubtypeOf('xs:numeric') ||
        areBothSubtypeOf('xs:anyURI') ||
        areBothSubtypeOf('xs:hexBinary') ||
        areBothSubtypeOf('xs:base64Binary') ||
        areBothStringOrAnyURI(typeA, typeB)) {
        switch (operator) {
            case 'eqOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value === castB.value;
                };
            case 'neOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value !== castB.value;
                };
            case 'ltOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value < castB.value;
                };
            case 'leOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value <= castB.value;
                };
            case 'gtOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value > castB.value;
                };
            case 'geOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value >= castB.value;
                };
        }
    }
    if (areBothSubtypeOf('xs:dateTime') ||
        areBothSubtypeOf('xs:date') ||
        areBothSubtypeOf('xs:time')) {
        switch (operator) {
            case 'eqOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return DateTime_1.equal(castA.value, castB.value, dynamicContext.getImplicitTimezone());
                };
            case 'neOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return !DateTime_1.equal(castA.value, castB.value, dynamicContext.getImplicitTimezone());
                };
            case 'ltOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return DateTime_1.lessThan(castA.value, castB.value, dynamicContext.getImplicitTimezone());
                };
            case 'leOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return DateTime_1.equal(castA.value, castB.value, dynamicContext.getImplicitTimezone()) ||
                        DateTime_1.lessThan(castA.value, castB.value, dynamicContext.getImplicitTimezone());
                };
            case 'gtOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return DateTime_1.greaterThan(castA.value, castB.value, dynamicContext.getImplicitTimezone());
                };
            case 'geOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return DateTime_1.equal(castA.value, castB.value, dynamicContext.getImplicitTimezone()) ||
                        DateTime_1.greaterThan(castA.value, castB.value, dynamicContext.getImplicitTimezone());
                };
        }
    }
    if (areBothSubtypeOf('xs:gYearMonth') ||
        areBothSubtypeOf('xs:gYear') ||
        areBothSubtypeOf('xs:gMonthDay') ||
        areBothSubtypeOf('xs:gMonth') ||
        areBothSubtypeOf('xs:gDay')) {
        switch (operator) {
            case 'eqOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return DateTime_1.equal(castA.value, castB.value, dynamicContext.getImplicitTimezone());
                };
            case 'neOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return !DateTime_1.equal(castA.value, castB.value, dynamicContext.getImplicitTimezone());
                };
        }
    }
    if (areBothSubtypeOf('xs:yearMonthDuration')) {
        switch (operator) {
            case 'ltOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return YearMonthDuration_1.lessThan(castA.value, castB.value);
                };
            case 'leOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value.equals(castB.value) ||
                        YearMonthDuration_1.lessThan(castA.value, castB.value);
                };
            case 'gtOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return YearMonthDuration_1.greaterThan(castA.value, castB.value);
                };
            case 'geOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value.equals(castB.value) ||
                        YearMonthDuration_1.greaterThan(castA.value, castB.value);
                };
        }
    }
    if (areBothSubtypeOf('xs:dayTimeDuration')) {
        switch (operator) {
            case 'eqOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value.equals(castB.value);
                };
            case 'ltOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return DayTimeDuration_1.lessThan(castA.value, castB.value);
                };
            case 'leOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value.equals(castB.value) ||
                        DayTimeDuration_1.lessThan(castA.value, castB.value);
                };
            case 'gtOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return DayTimeDuration_1.greaterThan(castA.value, castB.value);
                };
            case 'geOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value.equals(castB.value) ||
                        DayTimeDuration_1.greaterThan(castA.value, castB.value);
                };
        }
    }
    if (areBothSubtypeOf('xs:duration')) {
        switch (operator) {
            case 'eqOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return castA.value.equals(castB.value);
                };
            case 'neOp':
                return (a, b) => {
                    const { castA, castB } = applyCastFunctions(a, b);
                    return !castA.value.equals(castB.value);
                };
        }
    }
    throw new Error(`XPTY0004: ${operator} not available for ${typeA} and ${typeB}`);
}
const comparatorsByTypingKey = Object.create(null);
function valueCompare(operator, valueA, valueB, dynamicContext) {
    // https://www.w3.org/TR/xpath-3/#doc-xpath31-ValueComp
    const typingKey = `${valueA.type}~${valueB.type}~${operator}`;
    let prefabComparator = comparatorsByTypingKey[typingKey];
    if (!prefabComparator) {
        prefabComparator = comparatorsByTypingKey[typingKey] = generateCompareFunction(operator, valueA.type, valueB.type, dynamicContext);
    }
    return prefabComparator(valueA, valueB);
}
exports.default = valueCompare;
//# sourceMappingURL=data:application/json;base64,