// Basic XPath expression fuzzer inspired by @gamozolabs
//
// This script implements a simple fuzzer which uses a `corpus` of valid XPath expressions
// which it mutates using `mutateCharactersInPlace` and `mutateString` and then evaluates to
// test the parser and the expression engine for bugs.
//
// The fuzzer deduplicates errors thrown by their unique stack trace and filters out
// expected XPath errors which are properly generated by the engine to reduce noise.
//
// The fuzzer reports its progress, including the number of unique crashes and the number
// of fuzz cases per second (`fcps`) every 1000 cases.
//
// # Running the fuzzer
//
// ```
// npm run fuzzer
// ```
//
// # Ideas/Improvements
//
// * Component library + mutation strategy
// * Clean up the corpus
// * Corpus feedback
//
// # References
//
// * [Fuzz Week](https://www.youtube.com/playlist?list=PLSkhUfcCXvqHsOy2VUxuoAf5m_7c8RqvO)
// * [YouTube](https://www.youtube.com/user/gamozolabs)
// * [Twitch](https://www.twitch.tv/gamozo)
//

import CorpusBasedFuzzer from 'corpus_based_fuzzer';
import Engine from 'engine';
import ISO_CORPUS from 'iso_corpus';

const fuzzer = new CorpusBasedFuzzer(ISO_CORPUS);
const engine = new Engine<CorpusBasedFuzzer>();
engine.run(fuzzer, __filename);
