id-comma-expr-013,Child expressions are allowed to be updating in version 3.0
id-comma-expr-014,Child expressions are allowed to be updating in version 3.0
id-comma-expr-06,Child expressions are allowed to be updating in version 3.0
id-comma-expr-07,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-011,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-012,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-034,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-038,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-05,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-06,Child expressions are allowed to be updating in version 3.0
id-delete-expr-06,Child expressions are allowed to be updating in version 3.0
id-insert-expr-023,Child expressions are allowed to be updating in version 3.0
id-insert-expr-024,Child expressions are allowed to be updating in version 3.0
id-insert-expr-025,Child expressions are allowed to be updating in version 3.0
id-rename-expr-06,Child expressions are allowed to be updating in version 3.0
id-transform-expr-012,Child expressions are allowed to be updating in version 3.0
id-transform-expr-013,Error XUST0002 is no longer available in version 3.0.
id-transform-expr-014,Child expressions are allowed to be updating in version 3.0
id-transform-expr-018,Error XUST0002 is no longer available in version 3.0.
=====================TESTS ABOVE HAVE BEEN MARKED MANUALLY=====================
variable-declaration-01,Error: expected 'Not implemented: only external variable declaration without default value is implemented in XQuery modules' to match /XUST0001/
variable-declaration-02,Error: expected 'Not implemented: only external variable declaration without default value is implemented in XQuery modules' to match /XUST0001/
id-function-declaration-01,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-01 :) (: Description: Evaluation of insert expression used with function declaration. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare updating function     local:insertFunction($e as element())     {    let $e1 := $e    return      insert node <hours>21</hours> as last into $e1    };     let $arg1 := $input-context/works[1]/employee[1] return   local:insertFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-01 :) (: Description: Evaluation of insert expression used with function declaration. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare [Error is around here]updating function     local:insertFunction($e as element())     {    let $e1 := $e    return      insert node <hours>21</hours> as last into $e1    };     let $arg1 := $input-context/works[1]/employee[1] return   local:insertFunction($arg1)
id-function-declaration-02,Error: expected 'The expression (: Name: id-function-declaration-02 :)\n(: Description: Evaluation of insert expression used with function declaration. :)\n(: Function is declared not "updating" an not external and enclosed expression :)\n(: is an updating expression.  :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n\ndeclare function \n   local:insertFunction($e as element()) \n   {\n   let $e1 := $e\n   return\n     insert node <hour>20</hour> into $e1\n   };\n   \nlet $arg1 := $input-context/employees[1]/employee[1]\nreturn\n  local:insertFunction($arg1) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-function-declaration-03,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-03 :) (: Description: Evaluation of insert expression used with function declaration. :) (: Function is declared "updating" and not external and enclosed expression :) (: is the empty sequence.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare updating function     local:insertFunction($e as element())     {      ()    };  let $arg1 := $input-context/works[1]/employee[3]   return   local:insertFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-03 :) (: Description: Evaluation of insert expression used with function declaration. :) (: Function is declared "updating" and not external and enclosed expression :) (: is the empty sequence.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare [Error is around here]updating function     local:insertFunction($e as element())     {      ()    };  let $arg1 := $input-context/works[1]/employee[3]   return   local:insertFunction($arg1)
id-function-declaration-04,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-04 :) (: Description: Evaluation of insert expression used with function declaration. :) (: Function is declared "updating" and not external and enclosed expression :) (: is call to fn:error.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare updating function     local:insertFunction($e as element())     {     fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))    };     let $arg1 := $input-context/works[1]/employee[3]     return   local:insertFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-04 :) (: Description: Evaluation of insert expression used with function declaration. :) (: Function is declared "updating" and not external and enclosed expression :) (: is call to fn:error.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare [Error is around here]updating function     local:insertFunction($e as element())     {     fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))    };     let $arg1 := $input-context/works[1]/employee[3]     return   local:insertFunction($arg1)
id-function-declaration-05,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-05 :) (: Description: Evaluation of usage of mathematical expression used with function declaration. :) (: Function is declared "updating" and not external and enclosed expression :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare updating function     local:insertFunction($e as xs:integer)     {    let $e1 := $e    return      $e1 + $e         };     let $arg1 := xs:integer($input-context/employees[1]/salary[1])    return   local:insertFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-05 :) (: Description: Evaluation of usage of mathematical expression used with function declaration. :) (: Function is declared "updating" and not external and enclosed expression :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare [Error is around here]updating function     local:insertFunction($e as xs:integer)     {    let $e1 := $e    return      $e1 + $e         };     let $arg1 := xs:integer($input-context/employees[1]/salary[1])    return   local:insertFunction($arg1)
id-function-declaration-06,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-06 :) (: Description: Evaluation of a delete expression used with function declaration. :) (: Function is declared not "updating" an not external and enclosed expression :) (: is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare updating function     local:insertFunction($e as element())     {    let $e1 := $e    return      delete node $e/hours[1]    };     let $arg1 := $input-context/works[1]/employee[2] return   local:insertFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-06 :) (: Description: Evaluation of a delete expression used with function declaration. :) (: Function is declared not "updating" an not external and enclosed expression :) (: is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare [Error is around here]updating function     local:insertFunction($e as element())     {    let $e1 := $e    return      delete node $e/hours[1]    };     let $arg1 := $input-context/works[1]/employee[2] return   local:insertFunction($arg1)
id-function-declaration-07,Error: expected 'The expression (: Name: id-function-declaration-07 :)\n(: Description: Evaluation of a delete expression used with function declaration. :)\n(: Function is declared "updating" and enclosed expression is an updating expression.  :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n\ndeclare function \n   local:insertFunction($e as element()) \n   {\n   let $e1 := $e\n   return\n     delete node $e/salary[1]\n   };\n   \nlet $arg1 := $input-context/employees[1]/employee[1]\nreturn\n  local:insertFunction($arg1) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-function-declaration-08,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-08 :) (: Description: Evaluation of a replace expression used with function declaration. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare updating function     local:replaceFunction($e as element())     {    let $e1 := $e       return      replace value of node $e1/hours[1] with $e1/hours[2]    };     let $arg1 := $input-context/works[1]/employee[2] return   local:replaceFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-08 :) (: Description: Evaluation of a replace expression used with function declaration. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare [Error is around here]updating function     local:replaceFunction($e as element())     {    let $e1 := $e       return      replace value of node $e1/hours[1] with $e1/hours[2]    };     let $arg1 := $input-context/works[1]/employee[2] return   local:replaceFunction($arg1)
id-function-declaration-09,Error: expected 'The expression (: Name: id-function-declaration-09 :)\n(: Description: Evaluation of a replace expression used with function declaration. :)\n(: Function is declared not "updating" an not external and enclosed expression :)\n(: is an updating expression.  :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n\ndeclare function \n   local:replaceFunction($e as element()) \n   {\n   let $e1 := $e    \n   return\n     replace value of node $e1/employee[1]/salary[1] with $e1/employee[2]/salary[1]\n   };\n   \nlet $arg1 := $input-context/employees[1]\nreturn\n  local:replaceFunction($arg1) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-function-declaration-010,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-010 :) (: Description: Evaluation of a rename expression used with function declaration. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare updating function     local:renameFunction($e as element())     {    let $e1 := $e     return      rename node $e1/hours[1] as "hours-1"    };     let $arg1 := $input-context/works[1]/employee[3] return   local:renameFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-010 :) (: Description: Evaluation of a rename expression used with function declaration. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare [Error is around here]updating function     local:renameFunction($e as element())     {    let $e1 := $e     return      rename node $e1/hours[1] as "hours-1"    };     let $arg1 := $input-context/works[1]/employee[3] return   local:renameFunction($arg1)
id-function-declaration-011,Error: expected 'The expression (: Name: id-function-declaration-011 :)\n(: Description: Evaluation of a rename expression used with function declaration. :)\n(: Function is declared not "updating" an not external and enclosed expression :)\n(: is an updating expression.  :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n\ndeclare function \n   local:renameFunction($e as element()) \n   {\n   let $e1 := $e    \n   return\n     rename node $e1/salary[1] as "salary-1"\n   };\n   \nlet $arg1 := $input-context/employees[1]/employee[3]\nreturn\n  local:renameFunction($arg1) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-function-declaration-012,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-012 :) (: Description: Evaluation of a transform expression used with function declaration. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare updating function     local:transformFunction($e as element())     {    let $e1 := $e    return      copy $newVar := $e1 modify delete node $newVar/hours[1] return $newVar    };     let $arg1 := $input-context/works[1]/employee[2] return   local:transformFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-012 :) (: Description: Evaluation of a transform expression used with function declaration. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare [Error is around here]updating function     local:transformFunction($e as element())     {    let $e1 := $e    return      copy $newVar := $e1 modify delete node $newVar/hours[1] return $newVar    };     let $arg1 := $input-context/works[1]/employee[2] return   local:transformFunction($arg1)
id-function-declaration-013,Error: The expression (: Name: id-function-declaration-013 :) (: Description: Evaluation of a transform expression used with function declaration. :) (: Function is declared not "updating" an not external and enclosed expression :) (: is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare function     local:transformFunction($e as element())     {      copy $newVar := $e modify delete node $newVar/employee[4] return $newVar    };     let $arg1 := $input-context/employees[1] return   local:transformFunction($arg1) is not updating and can not be executed as an updating expression.
id-function-declaration-014,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-014 :) (: Description: Evaluation of a function declaration declared as updating, :) (: and a return type is specified. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare updating function     local:transformFunction($e as element()) as element()     {    let $e1 := $e    return      copy $newVar := $e1 modify delete node $newVar/salary[1] return $newVar    };     let $arg1 := $input-context/employees[1]/employee[1] return   local:transformFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-014 :) (: Description: Evaluation of a function declaration declared as updating, :) (: and a return type is specified. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare [Error is around here]updating function     local:transformFunction($e as element()) as element()     {    let $e1 := $e    return      copy $newVar := $e1 modify delete node $newVar/salary[1] return $newVar    };     let $arg1 := $input-context/employees[1]/employee[1] return   local:transformFunction($arg1)
id-function-declaration-015,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-015 :) (: Description: Invalid use of an updating expression within an updating function. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare updating function     local:insertFunction($e as element())     {    let $e1 := delete nodes $e/*/*    return      insert node <hours>21</hours> as last into $e    };     let $arg1 := $input-context/works[1]/employee[1] return   local:insertFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-015 :) (: Description: Invalid use of an updating expression within an updating function. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare [Error is around here]updating function     local:insertFunction($e as element())     {    let $e1 := delete nodes $e/*/*    return      insert node <hours>21</hours> as last into $e    };     let $arg1 := $input-context/works[1]/employee[1] return   local:insertFunction($arg1)
id-function-declaration-016,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-016 :) (: Description: Invalid use of a non-updating expression within an updating function. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare updating function     local:insertFunction($e as element())     {    if (current-date() gt xs:date('1900-01-01'))    then      insert node <hours>21</hours> as last into $e    else      'exit'    };     let $arg1 := $input-context/works[1]/employee[1] return   local:insertFunction($arg1)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-016 :) (: Description: Invalid use of a non-updating expression within an updating function. :) (: Function is declared "updating" and enclosed expression is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare [Error is around here]updating function     local:insertFunction($e as element())     {    if (current-date() gt xs:date('1900-01-01'))    then      insert node <hours>21</hours> as last into $e    else      'exit'    };     let $arg1 := $input-context/works[1]/employee[1] return   local:insertFunction($arg1)
id-function-declaration-017,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-017 :) (: Description: Recursive updating function. :)   declare updating function local:increase($e as element(b)?, $amount as xs:integer)     {      if ($e) then (         replace value of node $e with ($e + $amount),         local:increase($e/../b[.>>$e][1], $amount+1)         (: i.e. $e/following-sibling::b[1], but we're not allowed to use the following-sibling axis: see bug 8251 :)      ) else ()    };     let $a1 :=    <a>{for $i in 1 to 100 return <b>{$i}</b>}</a> let $a2 :=     copy $a3 := $a1    modify local:increase($a3/b[1], 1)    return $a3 return <totals>{sum($a1/b/xs:integer(.)), sum($a2/b/xs:integer(.))}</totals>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-017 :) (: Description: Recursive updating function. :)   declare [Error is around here]updating function local:increase($e as element(b)?, $amount as xs:integer)     {      if ($e) then (         replace value of node $e with ($e + $amount),         local:increase($e/../b[.>>$e][1], $amount+1)         (: i.e. $e/following-sibling::b[1], but we're not allowed to use the following-sibling axis: see bug 8251 :)      ) else ()    };     let $a1 :=    <a>{for $i in 1 to 100 return <b>{$i}</b>}</a> let $a2 :=     copy $a3 := $a1    modify local:increase($a3/b[1], 1)    return $a3 return <totals>{sum($a1/b/xs:integer(.)), sum($a2/b/xs:integer(.))}</totals>
function-declaration-01,Error: expected 'The expression (: Name: function-declaration-01 :)\n(: Description: Function declaration, non-updating, with updating expression. :)\n\n(: insert-start :)\ndeclare variable $employees external;\n(: insert-end :)\n\ndeclare function local:test ($emp)\n   { replace value of node $emp/salary with 200000 };\n\nlocal:test($employees/employees/*[1])\n is not updating and can not be executed as an updating expression.' to match /XUST0001/
function-declaration-02,Error: XPST0003: Unable to parse XPath: "(: Name: function-declaration-02 :) (: Description: Function declaration, updating, with return type. :)  (: insert-start :) declare variable $employees external; (: insert-end :)  declare updating function local:test ($emp) as xs:integer    { replace value of node $emp/salary with 200000 };  local:test($employees/employees/*[1]) ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: function-declaration-02 :) (: Description: Function declaration, updating, with return type. :)  (: insert-start :) declare variable $employees external; (: insert-end :)  declare [Error is around here]updating function local:test ($emp) as xs:integer    { replace value of node $emp/salary with 200000 };  local:test($employees/employees/*[1])
function-declaration-03,Error: XPST0003: Unable to parse XPath: "(: Name: function-declaration-03 :) (: Description: Function declaration, updating, with simple expression. :)  (: insert-start :) declare variable $employees external; (: insert-end :)  declare updating function local:test ($emp)    { 12 };  local:test($employees/employees/*[1]) ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: function-declaration-03 :) (: Description: Function declaration, updating, with simple expression. :)  (: insert-start :) declare variable $employees external; (: insert-end :)  declare [Error is around here]updating function local:test ($emp)    { 12 };  local:test($employees/employees/*[1])
function-declaration-04,Error: XPST0003: Unable to parse XPath: "(: Name: function-declaration-04 :) (: Description: Function declaration, updating, with vacuous expression. :)  (: insert-start :) declare variable $employees external; (: insert-end :)  declare updating function local:test ($emp)    { () };  local:test($employees/employees/*[1]) ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: function-declaration-04 :) (: Description: Function declaration, updating, with vacuous expression. :)  (: insert-start :) declare variable $employees external; (: insert-end :)  declare [Error is around here]updating function local:test ($emp)    { () };  local:test($employees/employees/*[1])
id-insert-expr-057,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0005/
id-insert-expr-071,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUDY0029/ or expected 'No selector counterpart for: computedTextConstructor.' to match /XUDY0030/
id-insert-expr-072,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUDY0029/ or expected 'No selector counterpart for: computedTextConstructor.' to match /XUDY0030/
id-insert-expr-077,Error: No selector counterpart for: computedTextConstructor.
id-insert-expr-080,Error: No selector counterpart for: computedTextConstructor.
id-insert-expr-081,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-082,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-083,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-084,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-085,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-086,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-081-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-082-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-083-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-084-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-085-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-086-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-094,Error: XUDY0023: The namespace binding null is conflicting.
id-delete-expr-019,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-delete-expr-020,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-delete-expr-021,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-delete-expr-022,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
complex-deletes-q12,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-replace-expr-011,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-replace-expr-012,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-replace-expr-013,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0008/
id-replace-expr-014,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0009/
id-replace-expr-015,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0008/
id-replace-expr-016,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0011/
id-replace-expr-022,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0010/
id-replace-expr-028,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0027/
id-replace-expr-030,Error: No selector counterpart for: computedTextConstructor.
id-replace-expr-045,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-replace-expr-045-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-replace-expr-08,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-replace-expr-017,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-replace-expr-018,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-replace-expr-019,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0008/
id-replace-expr-020,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0008/
id-replace-expr-021,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
complex-replacevalues-q11,Error: XPST0008, The variable pos is not in scope.
complex-replacevalues-q12,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-rename-expr-033,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-034,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-033-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-034-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-035,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-036,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-037,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
complex-renames-q6,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
complex-renames-q7,Error: XPST0008, The variable pos is not in scope.
complex-renames-q8,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-transform-expr-01,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-transform-expr-05,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-transform-expr-06,Error: XUTY0013: The source expression of a copy modify expression must return a single node.
id-transform-expr-09,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-transform-expr-015,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0014/
id-transform-expr-030,Error: No selector counterpart for: computedTextConstructor.
id-transform-expr-041,Error: Not supported: renaming detached nodes.
id-transform-expr-042,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-043,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-044,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-045,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-046,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-047,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-048,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-049,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-050,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-051,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-052,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-053,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-054,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-057,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-007,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-008,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-009,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-010,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-011,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-012,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-013,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-014,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-015,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
compatibility-016,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0016/
id-flwor-expr-01,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-02,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-03,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-04,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-05,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-06,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-07,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-08,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-09,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-010,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-011,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-012,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-013,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-014,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-015,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-016,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUST0001/
id-flwor-expr-017,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-flwor-expr-018,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-flwor-expr-019,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-flwor-expr-020,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-flwor-expr-024,Error: expected 'Can not execute an updating expression without catching the pending updates' to match /XUST0001/
id-typeswitch-expr-01,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-01 :) (: Description: Evaluation of insert expression used with typeswitch expression where the operand is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(insert node <salary>23000</salary> into $input-context/employees[1]/employee[1])  case $i as xs:string     return "test should fail"  case $i as xs:double     return "test should fail"   default    return "test should fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-01 :) (: Description: Evaluation of insert expression used with typeswitch expression where the operand is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](insert node <salary>23000</salary> into $input-context/employees[1]/employee[1])  case $i as xs:string     return "test should fail"  case $i as xs:double     return "test should fail"   default    return "test should fail"
id-typeswitch-expr-02,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-02 :) (: Description: Evaluation of insert expression used with typeswitch expression where the branch (a "case") is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return (insert node <hours>20</hours> into $input-context/works[1]/employee[1])  case $i as xs:double     return ()   default    return ()". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-02 :) (: Description: Evaluation of insert expression used with typeswitch expression where the branch (a "case") is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (insert node <hours>20</hours> into $input-context/works[1]/employee[1])  case $i as xs:double     return ()   default    return ()
id-typeswitch-expr-03,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-03 :) (: Description: Evaluation of insert expression used with typeswitch expression where the branch (a "default") is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:string     return ()  case $i as xs:double     return ()   default    return (insert node <hours>30</hours> into $input-context/works[1]/employee[1])". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-03 :) (: Description: Evaluation of insert expression used with typeswitch expression where the branch (a "default") is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:string     return ()  case $i as xs:double     return ()   default    return (insert node <hours>30</hours> into $input-context/works[1]/employee[1])
id-typeswitch-expr-04,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-04 :) (: Description: Evaluation of insert expression used with typeswitch expression where branch (a "case") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return (insert node <hours>30</hours> into $input-context/works[1]/employee[1])  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-04 :) (: Description: Evaluation of insert expression used with typeswitch expression where branch (a "case") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (insert node <hours>30</hours> into $input-context/works[1]/employee[1])  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
id-typeswitch-expr-05,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-05 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default      return (insert node <hours>34</hours> into $input-context/works[1]/employee[2])". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-05 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default      return (insert node <hours>34</hours> into $input-context/works[1]/employee[2])
id-typeswitch-expr-06,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-06 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return (insert node <salary>34000</salary> into $input-context/employees[1]/employee[2])  case $i as xs:double     return "This test should fail"  default     return "This test should fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-06 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (insert node <salary>34000</salary> into $input-context/employees[1]/employee[2])  case $i as xs:double     return "This test should fail"  default     return "This test should fail"
id-typeswitch-expr-07,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-07 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:string         return "This test should fail"  case $i as xs:double     return "This test should fail"  default     return (insert node <salary>34000</salary> into $input-context/employees[1]/employee[2])". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-07 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:string         return "This test should fail"  case $i as xs:double     return "This test should fail"  default     return (insert node <salary>34000</salary> into $input-context/employees[1]/employee[2])
id-typeswitch-expr-08,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-08 :) (: Description: Evaluation of delete expression used with typeswitch expression where the operand is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch(insert node <salary>34000</salary> into $input-context/employees[1]/employee[2])   case $i as xs:string     return "test should fail"   case $i as xs:double     return "test should fail"    default    return "test should fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-08 :) (: Description: Evaluation of delete expression used with typeswitch expression where the operand is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch[Error is around here](insert node <salary>34000</salary> into $input-context/employees[1]/employee[2])   case $i as xs:string     return "test should fail"   case $i as xs:double     return "test should fail"    default    return "test should fail"
id-typeswitch-expr-09,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-09 :) (: Description: Evaluation of a delete expression used with typeswitch expression where the branch (a "case") is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch(xs:int(1))   case $i as xs:int     return (delete node $input-context/works[1]/employee[1]/hours[1])   case $i as xs:double     return ()    default     return () ". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-09 :) (: Description: Evaluation of a delete expression used with typeswitch expression where the branch (a "case") is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch[Error is around here](xs:int(1))   case $i as xs:int     return (delete node $input-context/works[1]/employee[1]/hours[1])   case $i as xs:double     return ()    default     return ()
id-typeswitch-expr-010,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-010 :) (: Description: Evaluation of delete expression used with typeswitch expression where the branch (a "default") is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch(xs:int(1))   case $i as xs:string     return ()   case $i as xs:double     return ()    default    return (delete node $input-context/works[1]/employee[1]/hours[1])". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-010 :) (: Description: Evaluation of delete expression used with typeswitch expression where the branch (a "default") is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch[Error is around here](xs:int(1))   case $i as xs:string     return ()   case $i as xs:double     return ()    default    return (delete node $input-context/works[1]/employee[1]/hours[1])
id-typeswitch-expr-011,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-011 :) (: Description: Evaluation of insert expression used with typeswitch expression where branch (a "case") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch(xs:int(1))   case $i as xs:int     return (insert node <hours>150000</hours> into $input-context/works[1]/employee[2])   case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))   default     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-011 :) (: Description: Evaluation of insert expression used with typeswitch expression where branch (a "case") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch[Error is around here](xs:int(1))   case $i as xs:int     return (insert node <hours>150000</hours> into $input-context/works[1]/employee[2])   case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))   default     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
id-typeswitch-expr-012,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-012 :) (: Description: Evaluation of a delete expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch(xs:int(1))   case $i as xs:int     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))   case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))   default      return insert node <hours>50</hours> into $input-context/works[1]/employee[2]". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-012 :) (: Description: Evaluation of a delete expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch[Error is around here](xs:int(1))   case $i as xs:int     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))   case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))   default      return insert node <hours>50</hours> into $input-context/works[1]/employee[2]
id-typeswitch-expr-013,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-013 :) (: Description: Evaluation of an insert expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := <hours><hour>10</hour><hour>20</hour></hours> return  typeswitch(xs:int(1))   case $i as xs:int     return (insert node <salary>50000</salary> into $input-context/employees[1]/employee[2])   case $i as xs:double     return "This test should fail"   default     return "This test should fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-013 :) (: Description: Evaluation of an insert expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := <hours><hour>10</hour><hour>20</hour></hours> return  typeswitch[Error is around here](xs:int(1))   case $i as xs:int     return (insert node <salary>50000</salary> into $input-context/employees[1]/employee[2])   case $i as xs:double     return "This test should fail"   default     return "This test should fail"
id-typeswitch-expr-014,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-014 :) (: Description: Evaluation of a delete expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := <hours><hour>10</hour><hour>20</hour></hours> return  typeswitch(xs:int(1))   case $i as xs:string         return "This test should fail"   case $i as xs:double     return "This test should fail"   default     return (insert node <salary>50000</salary> into $input-context/employees[1]/employee[2])". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-014 :) (: Description: Evaluation of a delete expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := <hours><hour>10</hour><hour>20</hour></hours> return  typeswitch[Error is around here](xs:int(1))   case $i as xs:string         return "This test should fail"   case $i as xs:double     return "This test should fail"   default     return (insert node <salary>50000</salary> into $input-context/employees[1]/employee[2])
id-typeswitch-expr-015,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-015 :) (: Description: Evaluation of a replace expression used with typeswitch expression where the operand is an updating (replace) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(replace value of node $input-context/employees[1]/employee[1]/salary[1] with $input-context/employees[1]/employee[2]/salary[1])  case $i as xs:string     return "test should fail"  case $i as xs:double     return "test should fail"   default    return "test should fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-015 :) (: Description: Evaluation of a replace expression used with typeswitch expression where the operand is an updating (replace) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](replace value of node $input-context/employees[1]/employee[1]/salary[1] with $input-context/employees[1]/employee[2]/salary[1])  case $i as xs:string     return "test should fail"  case $i as xs:double     return "test should fail"   default    return "test should fail"
id-typeswitch-expr-016,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-016 :) (: Description: Evaluation of a replace expression used with typeswitch expression where the branch (a "case") is an updating (replace) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return (replace value of node $input-context/works[1]/employee[1]/hours[1] with $input-context/works[1]/employee[2]/hours[1])  case $i as xs:double     return ()   default    return ()". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-016 :) (: Description: Evaluation of a replace expression used with typeswitch expression where the branch (a "case") is an updating (replace) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (replace value of node $input-context/works[1]/employee[1]/hours[1] with $input-context/works[1]/employee[2]/hours[1])  case $i as xs:double     return ()   default    return ()
id-typeswitch-expr-017,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-017 :) (: Description: Evaluation of a replace expression used with typeswitch expression where the branch (a "default") is an updating expression. :) (: Other branches are equal to the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:string    return ()  case $i as xs:double    return ()   default    return (replace value of node $input-context/works[1]/employee[1]/hours[1] with $input-context/works[1]/employee[2]/hours[1])". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-017 :) (: Description: Evaluation of a replace expression used with typeswitch expression where the branch (a "default") is an updating expression. :) (: Other branches are equal to the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:string    return ()  case $i as xs:double    return ()   default    return (replace value of node $input-context/works[1]/employee[1]/hours[1] with $input-context/works[1]/employee[2]/hours[1])
id-typeswitch-expr-018,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-018 :) (: Description: Evaluation of a replace expression used with typeswitch expression where branch (a "case") is an updating (replace) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return (replace value of node $input-context/works[1]/employee[1]/hours[1] with $input-context/works[1]/employee[2]/hours[1])  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-018 :) (: Description: Evaluation of a replace expression used with typeswitch expression where branch (a "case") is an updating (replace) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (replace value of node $input-context/works[1]/employee[1]/hours[1] with $input-context/works[1]/employee[2]/hours[1])  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
id-typeswitch-expr-019,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-019 :) (: Description: Evaluation of a replace expression used with typeswitch expression where a branch (the "default") is an updating (replace) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2]  return  typeswitch("string")  case $i as xs:int     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default      return replace value of node $var/hours[1] with $var/hours[2]". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-019 :) (: Description: Evaluation of a replace expression used with typeswitch expression where a branch (the "default") is an updating (replace) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2]  return  typeswitch[Error is around here]("string")  case $i as xs:int     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default      return replace value of node $var/hours[1] with $var/hours[2]
id-typeswitch-expr-020,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-020 :) (: Description: Evaluation of a replace expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return (replace value of node $input-context/employees[1]/employee[1]/salary[1] with $input-context/employees[1]/employee[2]/salary[1])  case $i as xs:double     return "This test should fail"  default     return "This test should fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-020 :) (: Description: Evaluation of a replace expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (replace value of node $input-context/employees[1]/employee[1]/salary[1] with $input-context/employees[1]/employee[2]/salary[1])  case $i as xs:double     return "This test should fail"  default     return "This test should fail"
id-typeswitch-expr-021,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-021 :) (: Description: Evaluation of a replace expression used with typeswitch expression where a branch (the "default") is an updating (replace) expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:string         return "This test should fail"  case $i as xs:double     return "This test should fail"  default     return (replace value of node $input-context/employees[1]/employee[1]/salary[1] with $input-context/employees[1]/employee[2]/salary[1])". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-021 :) (: Description: Evaluation of a replace expression used with typeswitch expression where a branch (the "default") is an updating (replace) expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:string         return "This test should fail"  case $i as xs:double     return "This test should fail"  default     return (replace value of node $input-context/employees[1]/employee[1]/salary[1] with $input-context/employees[1]/employee[2]/salary[1])
id-typeswitch-expr-022,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-022 :) (: Description: Evaluation of rename expression used with typeswitch expression where the operand is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1")  case $i as xs:string     return "test should fail"  case $i as xs:double     return "test should fail"   default    return "test should fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-022 :) (: Description: Evaluation of rename expression used with typeswitch expression where the operand is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1")  case $i as xs:string     return "test should fail"  case $i as xs:double     return "test should fail"   default    return "test should fail"
id-typeswitch-expr-023,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-023 :) (: Description: Evaluation of a rename expression used with typeswitch expression where the branch (a "case") is an updating expression. :) (: The other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch(xs:int(1))  case $i as xs:int     return rename node $input-context/works[1]/employee[1]/hours[1] as "hours1"  case $i as xs:double     return ()   default    return ()". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-023 :) (: Description: Evaluation of a rename expression used with typeswitch expression where the branch (a "case") is an updating expression. :) (: The other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return rename node $input-context/works[1]/employee[1]/hours[1] as "hours1"  case $i as xs:double     return ()   default    return ()
id-typeswitch-expr-024,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-024 :) (: Description: Evaluation of a rename expression used with typeswitch expression where the branch (a "default") is an updating expression. :) (: Other branches are equal to the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:string     return ()  case $i as xs:double     return ()   default    return (rename node $input-context/works[1]/employee[2]/hours[1] as "hours1")". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-024 :) (: Description: Evaluation of a rename expression used with typeswitch expression where the branch (a "default") is an updating expression. :) (: Other branches are equal to the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:string     return ()  case $i as xs:double     return ()   default    return (rename node $input-context/works[1]/employee[2]/hours[1] as "hours1")
id-typeswitch-expr-025,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-025 :) (: Description: Evaluation of a rename expression used with typeswitch expression where branch (a "case") is an updating expression. :) (: All other branches invoke "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return rename node $input-context/works[1]/employee[2]/hours[1] as "hours1"  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-025 :) (: Description: Evaluation of a rename expression used with typeswitch expression where branch (a "case") is an updating expression. :) (: All other branches invoke "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return rename node $input-context/works[1]/employee[2]/hours[1] as "hours1"  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
id-typeswitch-expr-026,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-026 :) (: Description: Evaluation of a rename expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default      return rename node $input-context/works[1]/employee[2]/hours[1] as "hours1"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-026 :) (: Description: Evaluation of a rename expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default      return rename node $input-context/works[1]/employee[2]/hours[1] as "hours1"
id-typeswitch-expr-027,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-027 :) (: Description: Evaluation of a rename expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:int     return rename node $input-context/employees[1]/salary[1] as "salary1"  case $i as xs:double     return "This test should fail"  default     return "This test should fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-027 :) (: Description: Evaluation of a rename expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return rename node $input-context/employees[1]/salary[1] as "salary1"  case $i as xs:double     return "This test should fail"  default     return "This test should fail"
id-typeswitch-expr-028,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-028 :) (: Description: Evaluation of rename expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch(xs:int(1))  case $i as xs:string         return "This test should fail"  case $i as xs:double     return "This test should fail"  default     return rename node $input-context/employees[1]/salary[1] as "salary1"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-028 :) (: Description: Evaluation of rename expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  typeswitch[Error is around here](xs:int(1))  case $i as xs:string         return "This test should fail"  case $i as xs:double     return "This test should fail"  default     return rename node $input-context/employees[1]/salary[1] as "salary1"
id-typeswitch-expr-029,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-029 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the operand is an updating (transform) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch(copy $newVar := $var   modify delete node $newVar/salary[1]  return $newVar)  case $i as xs:string     return "not this one"  case $i as xs:double     return "not this one"  default $i    return ($i, $var)". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-029 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the operand is an updating (transform) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch[Error is around here](copy $newVar := $var   modify delete node $newVar/salary[1]  return $newVar)  case $i as xs:string     return "not this one"  case $i as xs:double     return "not this one"  default $i    return ($i, $var)
id-typeswitch-expr-030,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-030 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the branch (a "case") is an updating (transform) expression. :) (: Other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch(xs:int(1))  case $i as xs:int     return (copy $newVar := $var modify delete node $newVar/hours[1]     return $newVar)                            case $i as xs:double    return ()  default    return ()". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-030 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the branch (a "case") is an updating (transform) expression. :) (: Other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (copy $newVar := $var modify delete node $newVar/hours[1]     return $newVar)                            case $i as xs:double    return ()  default    return ()
id-typeswitch-expr-031,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-031 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the branch (a "default") is an updating (a transform) expression. :) (: Other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch(xs:int(1))  case $i as xs:string     return ()  case $i as xs:double     return ()   default    return (copy $newVar := $var modify delete node $newVar/hours[2]    return $newVar)". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-031 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the branch (a "default") is an updating (a transform) expression. :) (: Other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch[Error is around here](xs:int(1))  case $i as xs:string     return ()  case $i as xs:double     return ()   default    return (copy $newVar := $var modify delete node $newVar/hours[2]    return $newVar)
id-typeswitch-expr-032,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-032 :) (: Description: Evaluation of a transform expression used with typeswitch expression where branch (a "case") is an updating (a transform) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch(xs:int(1))  case $i as xs:int    return (copy $newVar := $var modify delete node $newVar/hours[1]    return $newVar)                                                          case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default  return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-032 :) (: Description: Evaluation of a transform expression used with typeswitch expression where branch (a "case") is an updating (a transform) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch[Error is around here](xs:int(1))  case $i as xs:int    return (copy $newVar := $var modify delete node $newVar/hours[1]    return $newVar)                                                          case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default  return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
id-typeswitch-expr-033,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-033 :) (: Description: Evaluation of a transform expression used with typeswitch expression where branch (the default) is an updating (a transform) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=$input-context/works[1]/employee[2] return typeswitch(xs:int(1))  case $i as xs:string     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return (copy $newVar := $var modify delete node $newVar/hours[2]     return $newVar) ". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-033 :) (: Description: Evaluation of a transform expression used with typeswitch expression where branch (the default) is an updating (a transform) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=$input-context/works[1]/employee[2] return typeswitch[Error is around here](xs:int(1))  case $i as xs:string     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return (copy $newVar := $var modify delete node $newVar/hours[2]     return $newVar)
id-typeswitch-expr-034,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-034 :) (: Description: Evaluation of a transform expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch(xs:int(1))  case $i as xs:int     return (copy $newVar := $var modify delete node $newVar/salary[1]     return $newVar)   case $i as xs:double     return "This test should not fail"  default     return "This test should not fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-034 :) (: Description: Evaluation of a transform expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (copy $newVar := $var modify delete node $newVar/salary[1]     return $newVar)   case $i as xs:double     return "This test should not fail"  default     return "This test should not fail"
id-typeswitch-expr-035,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-035 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch(xs:int(1))  case $i as xs:string         return "This test should not fail"  case $i as xs:double     return "This test should not fail"  default     return (copy $newVar := $var modify delete node $newVar/salary[1]     return $newVar) ". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-035 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch[Error is around here](xs:int(1))  case $i as xs:string         return "This test should not fail"  case $i as xs:double     return "This test should not fail"  default     return (copy $newVar := $var modify delete node $newVar/salary[1]     return $newVar)
id-typeswitch-expr-036,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-036 :) (: Description: Updating typeswitch expression in an updating typeswitch expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    typeswitch(xs:int(10))       case $i as xs:int          return              typeswitch(xs:int(10))                case $i as xs:int                   return replace value of node $input-context/works[1]/employee[1]/hours[1] with 41                case $i as xs:double                   return replace value of node $input-context/works[1]/employee[1]/hours[1] with 42                default                   return replace value of node $input-context/works[1]/employee[1]/hours[1] with 43       case $i as xs:double          return replace value of node $input-context/works[1]/employee[1]/hours[1] with 44       default          return replace value of node $input-context/works[1]/employee[1]/hours[1] with 45 ". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-036 :) (: Description: Updating typeswitch expression in an updating typeswitch expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    typeswitch[Error is around here](xs:int(10))       case $i as xs:int          return              typeswitch(xs:int(10))                case $i as xs:int                   return replace value of node $input-context/works[1]/employee[1]/hours[1] with 41                case $i as xs:double                   return replace value of node $input-context/works[1]/employee[1]/hours[1] with 42                default                   return replace value of node $input-context/works[1]/employee[1]/hours[1] with 43       case $i as xs:double          return replace value of node $input-context/works[1]/employee[1]/hours[1] with 44       default          return replace value of node $input-context/works[1]/employee[1]/hours[1] with 45
id-typeswitch-expr-037,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-037 :) (: Description: Vacuous typeswitch expression in an updating typeswitch expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    typeswitch(xs:int(10))       case $i as xs:double          return              typeswitch(xs:int(10))                case $i as xs:int                   return ()                case $i as xs:double                   return ()                default                   return ()       case $i as xs:int          return replace value of node $input-context/works[1]/employee[1]/hours[1] with 44       default          return () ". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-037 :) (: Description: Vacuous typeswitch expression in an updating typeswitch expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    typeswitch[Error is around here](xs:int(10))       case $i as xs:double          return              typeswitch(xs:int(10))                case $i as xs:int                   return ()                case $i as xs:double                   return ()                default                   return ()       case $i as xs:int          return replace value of node $input-context/works[1]/employee[1]/hours[1] with 44       default          return ()
id-typeswitch-expr-038,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-038 :) (: Description: Simple typeswitch expression in an updating typeswitch expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    typeswitch(xs:int(10))       case $i as xs:double          return              typeswitch(xs:int(10))                case $i as xs:int                   return ()                case $i as xs:double                   return "Test"                default                   return ()       case $i as xs:int          return replace value of node $input-context/works[1]/employee[1]/hours[1] with 44       default          return () ". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-038 :) (: Description: Simple typeswitch expression in an updating typeswitch expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    typeswitch[Error is around here](xs:int(10))       case $i as xs:double          return              typeswitch(xs:int(10))                case $i as xs:int                   return ()                case $i as xs:double                   return "Test"                default                   return ()       case $i as xs:int          return replace value of node $input-context/works[1]/employee[1]/hours[1] with 44       default          return ()
id-conditional-expr-03,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-04,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-09,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-010,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-015,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-016,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-017,Error: Should throw error XUST0001.
id-conditional-expr-018,Error: Should throw error XUST0001.
id-conditional-expr-021,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-022,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-023,Error: Should throw error XUST0001.
id-conditional-expr-024,Error: expected 'XUDY0027: The target for an insert, replace, or rename expression expression should not be empty.' to match /XUST0001/
id-conditional-expr-027,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-028,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-031,Error: Not yet supported: Updating query with text assertion.
id-conditional-expr-032,Error: Should throw error XUST0001.
id-comma-expr-04,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-05,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-011,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-012,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-015,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-comma-expr-018,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-019,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-020,Error: Should throw error XUST0001.
id-comma-expr-021,Error: Should throw error XUST0001.
id-comma-expr-025,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-026,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-027,Error: Should throw error XUST0001.
id-comma-expr-028,Error: Should throw error XUST0001.
id-comma-expr-032,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-033,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-038,Error: Should throw error XUST0001.
parenthesized-expr-02,Error: expected 'Can not execute an updating expression without catching the pending updates' to match /XUST0001/
id-function-call-01,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicTypenull for insertFunction is incorrect. Expected exactly one' to match /XUST0001/
id-function-call-02,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicTypenull for insertFunction is incorrect. Expected exactly one' to match /XUST0001/
id-function-call-03,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicTypenull for replaceFunction is incorrect. Expected exactly one' to match /XUST0001/
id-function-call-04,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicTypenull for renameFunction is incorrect. Expected exactly one' to match /XUST0001/
id-function-call-06,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicTypenull for renameFunction is incorrect. Expected exactly one' to match /XUST0001/
id-other-expr-01,Error: expected 'Not implemented: only external variable declaration without default value is implemented in XQuery modules' to match /XUST0001/
id-other-expr-02,Error: expected 'Not implemented: only external variable declaration without default value is implemented in XQuery modules' to match /XUST0001/
id-other-expr-03,Error: expected 'Not implemented: only external variable declaration without default value is implemented in XQuery modules' to match /XUST0001/
id-other-expr-04,Error: expected 'Not implemented: only external variable declaration without default value is implemented in XQuery modules' to match /XUST0001/
id-other-expr-05,Error: Not implemented: only external variable declaration without default value is implemented in XQuery modules
id-other-expr-06,Error: expected 'The expression (: Name: id-other-expr-06 :)\n(: Description: Evaluates usage of an updating expression (delete) as part of a logical (and) expression and usage of fn:true() function. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\nfn:true() and (delete node $input-context/employees[1]/employee[1]/salary[1]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-07,Error: expected 'The expression (: Name: id-other-expr-07 :)\n(: Description: Evaluates usage of an updating expression (delete) as part of a logical (or) expression and usage of fn:true() function. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\nfn:true() or (delete node $input-context/employees[1]/employee[1]/salary[1]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-08,Error: expected 'The expression (: Name: id-other-expr-08 :)\n(: Description: Evaluates usage of an updating expression (delete) as part of a logical (and) expression and usage of fn:false() function. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\nfn:false() and (delete node $input-context/employees[1]/employee[1]/salary[1]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-09,Error: expected 'The expression (: Name: id-other-expr-09 :)\n(: Description: Evaluates usage of an updating expression (delete) as part of a logical (or) expression and usage of fn:false() function. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\nfn:false() or (delete node $input-context/employees[1]/employee[1]/salary[1]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-010,Error: expected 'The expression (: Name: id-other-expr-010 :)\n(: Description: Evaluates usage of an updating expression (rename) as part of a logical (and) expression and usage of fn:true() function. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\nfn:true() and (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-011,Error: expected 'The expression (: Name: id-other-expr-011 :)\n(: Description: Evaluates usage of an updating expression (replace) as part of a logical (and) expression and usage of fn:true() function. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\nfn:true() and (replace node $input-context/employees[1]/employee[1]/salary[1] with <salary1>120000</salary1>) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-012,Error: expected 'The expression (: Name: id-other-expr-012 :)\n(: Description: Evaluates usage of an updating expression (insert) as part of a logical (and) expression and usage of fn:true() function. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\nfn:true() and (insert node <salary1>120000</salary1> into $input-context/employees[1]/employee[1]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-013,Error: The expression (: Name: id-other-expr-013 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a logical (and) expression and usage of fn:true() function. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return  fn:true() and (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar) is not updating and can not be executed as an updating expression.
id-other-expr-014,Error: expected 'The expression (: Name: id-other-expr-014 :)\n(: Description: Evaluates usage of an updating expression (rename) as part of a Node Comparison (is) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) is (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-015,Error: expected 'The expression (: Name: id-other-expr-015 :)\n(: Description: Evaluates usage of an updating expression (delete) as part of a Node Comparison (is) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) is (delete node $input-context/employees[1]/employee[1]/salary[1]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-016,Error: expected 'The expression (: Name: id-other-expr-016 :)\n(: Description: Evaluates usage of an updating expression (replace) as part of a Node Comparison (is) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) is (replace node $input-context/employees[1]/employee[1]/salary[1] with <salary1>120000</salary1>) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-017,Error: The expression (: Name: id-other-expr-017 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a node comparison (is) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return  ($var) is (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar) is not updating and can not be executed as an updating expression.
id-other-expr-018,Error: The expression (: Name: id-other-expr-018 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a node comparison (is) expression (both operands are transform expressions). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return  (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar) is (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar) is not updating and can not be executed as an updating expression.
id-other-expr-019,Error: expected 'The expression (: Name: id-other-expr-019 :)\n(: Description: Evaluates usage of an updating expression (insert) as part of a Node Comparison (is) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) is (insert node <salary1>107900</salary1> into $input-context/employees[1]/employee[1]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-020,Error: expected 'The expression (: Name: id-other-expr-020 :)\n(: Description: Evaluates usage of an updating expression (insert) as part of a value Comparison (eq) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) eq (insert node <salary1>107900</salary1> into $input-context/employees[1]/employee[1]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-021,Error: expected 'The expression (: Name: id-other-expr-021 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (ne) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) ne (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-022,Error: expected 'The expression (: Name: id-other-expr-022 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (gt operator) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) gt (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-023,Error: expected 'The expression (: Name: id-other-expr-023 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (lt operator) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) lt (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-024,Error: expected 'The expression (: Name: id-other-expr-024 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (le operator) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) le (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-025,Error: expected 'The expression (: Name: id-other-expr-025 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (ge operator) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) ge (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-26,Error: expected 'The expression (: Name: id-other-expr-026 :)\n(: Description: Evaluates usage of an updating expression (delete) as part of a sequence expression (union operator). :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]) union (delete node $input-context/employees[1]/employee[2]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-027,Error: expected 'The expression (: Name: id-other-expr-027 :)\n(: Description: Evaluates usage of an updating expression (delete) as part of a sequence expression (intersect operator). :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]) intersect (delete node $input-context/employees[1]/employee[2]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-028,Error: expected 'The expression (: Name: id-other-expr-028 :)\n(: Description: Evaluates usage of an updating expression (delete) as part of a sequence expression (except operator). :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]) except (delete node $input-context/employees[1]/employee[2]) is not updating and can not be executed as an updating expression.' to match /XUST0001/
id-other-expr-029,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-other-expr-030,Error: The expression (: Name: id-other-expr-030 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a sequence expression (intersect operator). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var1 := $input-context/works[1]/employee[1] return fn:count((copy $newVar := $var1 modify delete node $newVar/hours[1] return $newVar) intersect (copy $newVar := $var1 modify delete node $newVar/hours[1] return $newVar)) is not updating and can not be executed as an updating expression.
id-other-expr-031,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-other-expr-032,Error: expected 'FORG0001: Cannot cast \n    Smith\n    100000\n   to xs:integer, pattern validation failed.' to match /XUST0001/
fn-put-001,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-007,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /FOUP0002/
fn-put-008,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUST0001/
fn-put-009,Error: No selector counterpart for: computedDocumentConstructor.
fn-put-011,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /FODC0002/ or expected 'No selector counterpart for: computedDocumentConstructor.' to match /FODC0005/
fn-put-012,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUDY0031/
fn-put-013,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-014,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUDY0031/
put-001,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-002,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-010,Error: XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*)null, xs:anyAtomicTypenull, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*)null, xs:integernull, item()*)"?
namespace-errors-q9,Error: Should throw error XUDY0024.
namespace-errors-q10,Error: Should throw error XUDY0024.
namespace-errors-q14,Error: Should throw error XUDY0024.
namespace-errors-q15,Error: Should throw error XUDY0024.
namespace-errors-q16,Error: InvalidStateError: Namespace prefix declarations cannot be used to undeclare a namespace (use a default namespace declaration instead)
mergeUpdates-001,Error: expected '<co3:employee xmlns:co3="http://www.example.com/company3" name="Jane Doe 1" gender="female" xmlns:co1="http://www.example.com/company1" co1:age="30">\n   <empnum>E1</empnum>\n   <pnum>P1</pnum>\n   <hours>40</hours>\n  </co3:employee>' to equal '<co3:employee name="Jane Doe 1" co2:gender="f" co1:age="30" xmlns:co1="http://www.example.com/company1" xmlns:co2="http://www.example.com/company2" xmlns:co3="http://www.example.com/company3">\n   <empnum>E1</empnum>\n   <pnum>P1</pnum>\n   <hours>40</hours>\n  </co3:employee>'
mergeUpdates-002,Error: Should throw error XUDY0024.
applyUpdates-013,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute name already exists.'
applyUpdates-014,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute name already exists.'
applyUpdates-016,Error: expected '<root>\n   E1\n   P1\n   40\n  </root>' to equal '<root><employee name="Jane Doe 1" gender="female">\n   <empnum>E1</empnum>\n   <pnum>P1</pnum>\n   <hours>40</hours>\n  </employee></root>'
applyUpdates-021,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute name already exists.'
applyUpdates-022,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute name already exists.'
applyUpdates-025,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute gender already exists.'
applyUpdates-026,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute gender already exists.'
setToUntyped-001,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-002,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-003,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-004,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-005,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-006,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-007,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-008,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-009,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-010,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces01,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces02,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces03,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces04,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces05,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces06,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
statictyp-xqupd-05,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0005/
statictyp-xqupd-09,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0022/
statictyp-xqupd-10,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0006/
statictyp-xqupd-16,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0006/
statictyp-xqupd-17,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0006/
statictyp-xqupd-18,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0006/
statictyp-xqupd-24,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0006/
statictyp-xqupd-25,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0022/
statictyp-xqupd-26,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0008/
statictyp-xqupd-27,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0010/
statictyp-xqupd-32,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0010/
statictyp-xqupd-36,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0010/
statictyp-xqupd-43,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0011/
statictyp-xqupd-49,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0008/
statictyp-xqupd-50,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0008/
statictyp-xqupd-51,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /XUTY0012/
update10keywords,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
revalidation-declaration-01,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-01 :) (: Description: One declare validation specifying strict :)  declare revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-01 :) (: Description: One declare validation specifying strict :)  declare [Error is around here]revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-02,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-02 :) (: Description: Two declare validation specifying strict :)  declare revalidation strict; declare revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-02 :) (: Description: Two declare validation specifying strict :)  declare [Error is around here]revalidation strict; declare revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidate-valstrict-del-001,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-del-001 :) (: Description: deleting a mandatory element is bad news :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-del-001 :) (: Description: deleting a mandatory element is bad news :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]
revalidate-valstrict-del-002,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-del-002 :) (: Description: deleting an optional element is perfectly OK :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//PRICE)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-del-002 :) (: Description: deleting an optional element is perfectly OK :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//PRICE)[1]
revalidate-valstrict-del-003,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-del-003 :) (: Description: deleting a mandatory attribute is bad news :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM[1]/@CAT)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-del-003 :) (: Description: deleting a mandatory attribute is bad news :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM[1]/@CAT)[1]
revalidate-valstrict-del-004,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-del-004 :) (: Description: deleting an optional attribute is fine :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM/@TAX)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-del-004 :) (: Description: deleting an optional attribute is fine :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM/@TAX)[1]
revalidate-valstrict-ins-001,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-001 :) (: Description: inserting a disallowed element is bad news :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage>rubbish</garbage> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-001 :) (: Description: inserting a disallowed element is bad news :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage>rubbish</garbage> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-valstrict-ins-002,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-002 :) (: Description: inserting a element that exceeds maxOccurs is bad news :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <TITLE xmlns="http://ns.example.com/books">rubbish</TITLE> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-002 :) (: Description: inserting a element that exceeds maxOccurs is bad news :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <TITLE xmlns="http://ns.example.com/books">rubbish</TITLE> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-valstrict-ins-003,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-003 :) (: Description: inserting a second AUTHOR is OK :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR> after ($books/BOOKLIST/BOOKS/ITEM/AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-003 :) (: Description: inserting a second AUTHOR is OK :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR> after ($books/BOOKLIST/BOOKS/ITEM/AUTHOR)[1]
revalidate-valstrict-ins-004,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-004 :) (: Description: inserting a disallowed attribute is bad news :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage trash="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-004 :) (: Description: inserting a disallowed attribute is bad news :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage trash="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-valstrict-ins-005,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-005 :) (: Description: inserting an allowed attribute is fine :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-005 :) (: Description: inserting an allowed attribute is fine :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-valstrict-ins-006,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-006 :) (: Description: inserting an xml:id doesn't work unless it's unique :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-006 :) (: Description: inserting an xml:id doesn't work unless it's unique :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-valstrict-ins-007,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-007 :) (: Description: inserting a duplicate xml:id is fine if we get rid of the old one :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1], replace value of node id('jff001', $books)/@xml:id with "jff002"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-007 :) (: Description: inserting a duplicate xml:id is fine if we get rid of the old one :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1], replace value of node id('jff001', $books)/@xml:id with "jff002"
revalidate-valstrict-ren-001,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ren-001 :) (: Description: renaming an element is bad news if the new name is not allowed :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1] as "WRITER"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ren-001 :) (: Description: renaming an element is bad news if the new name is not allowed :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1] as "WRITER"
revalidate-valstrict-ren-002,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ren-002 :) (: Description: renaming an attribute is bad news if the new name is not allowed :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//ITEM)[1]/@CAT as "cat"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ren-002 :) (: Description: renaming an attribute is bad news if the new name is not allowed :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//ITEM)[1]/@CAT as "cat"
revalidate-valstrict-ren-003,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ren-003 :) (: Description: renaming an element is OK if the new name is in the substitution group :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $e in $books//ITEM   return rename node $e as "SUBITEM"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ren-003 :) (: Description: renaming an element is OK if the new name is in the substitution group :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $e in $books//ITEM   return rename node $e as "SUBITEM"
revalidate-valstrict-repnode-001,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-repnode-001 :) (: Description: replace element fails if the new node is invalid :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-repnode-001 :) (: Description: replace element fails if the new node is invalid :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>
revalidate-valstrict-repnode-002,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-repnode-002 :) (: Description: replace attribute fails if the new node is invalid :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//ITEM)[1]/@CAT with <A cat="mmc"/>/@cat". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-repnode-002 :) (: Description: replace attribute fails if the new node is invalid :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//ITEM)[1]/@CAT with <A cat="mmc"/>/@cat
revalidate-valstrict-repnode-003,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-repnode-003 :) (: Description: replace element is OK if the new node is valid :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <AUTHOR>Thursday Next</AUTHOR>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-repnode-003 :) (: Description: replace element is OK if the new node is valid :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <AUTHOR>Thursday Next</AUTHOR>
revalidate-valtrans-ins-001,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-001 :) (: Description: inserting a disallowed element is bad news :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1] return    copy $book1copy := $book1   modify insert node <garbage>rubbish</garbage> as first into $book1copy   return $book1copy       ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-001 :) (: Description: inserting a disallowed element is bad news :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1] return    copy $book1copy := $book1   modify insert node <garbage>rubbish</garbage> as first into $book1copy   return $book1copy
revalidate-valtrans-ins-002,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-002 :) (: Description: inserting a permitted element is fine :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1] return    copy $book1copy := $book1   modify insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR>                  after ($book1copy/AUTHOR)[1]    return $book1copy       ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-002 :) (: Description: inserting a permitted element is fine :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1] return    copy $book1copy := $book1   modify insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR>                  after ($book1copy/AUTHOR)[1]    return $book1copy
revalidation-declaration-01-fail,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-01 :) (: Description: One declare validation specifying strict :)  declare revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-01 :) (: Description: One declare validation specifying strict :)  declare [Error is around here]revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-03,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-03 :) (: Description: One declare validation specifying lax :)  declare revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-03 :) (: Description: One declare validation specifying lax :)  declare [Error is around here]revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-04,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-04 :) (: Description: Two declare validation specifying lax :)  declare revalidation lax; declare revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-04 :) (: Description: Two declare validation specifying lax :)  declare [Error is around here]revalidation lax; declare revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidate-vallax-del-001,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-del-001 :) (: Description: deleting a mandatory element is bad news :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-del-001 :) (: Description: deleting a mandatory element is bad news :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]
revalidate-vallax-del-002,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-del-002 :) (: Description: deleting an optional element is perfectly OK :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//PRICE)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-del-002 :) (: Description: deleting an optional element is perfectly OK :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//PRICE)[1]
revalidate-vallax-del-003,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-del-003 :) (: Description: deleting a mandatory attribute is bad news :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM[1]/@CAT)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-del-003 :) (: Description: deleting a mandatory attribute is bad news :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM[1]/@CAT)[1]
revalidate-vallax-del-004,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-del-004 :) (: Description: deleting an optional attribute is fine :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM/@TAX)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-del-004 :) (: Description: deleting an optional attribute is fine :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM/@TAX)[1]
revalidate-vallax-ins-001,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ins-001 :) (: Description: inserting a disallowed element is bad news :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage>rubbish</garbage> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ins-001 :) (: Description: inserting a disallowed element is bad news :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage>rubbish</garbage> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-vallax-ins-002,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ins-002 :) (: Description: inserting a element that exceeds maxOccurs is bad news :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <TITLE xmlns="http://ns.example.com/books">rubbish</TITLE> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ins-002 :) (: Description: inserting a element that exceeds maxOccurs is bad news :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <TITLE xmlns="http://ns.example.com/books">rubbish</TITLE> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-vallax-ins-003,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ins-003 :) (: Description: inserting a second AUTHOR is OK :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR> after ($books/BOOKLIST/BOOKS/ITEM/AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ins-003 :) (: Description: inserting a second AUTHOR is OK :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR> after ($books/BOOKLIST/BOOKS/ITEM/AUTHOR)[1]
revalidate-vallax-ins-004,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ins-004 :) (: Description: inserting a disallowed attribute is bad news :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage trash="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ins-004 :) (: Description: inserting a disallowed attribute is bad news :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage trash="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-vallax-ins-005,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ins-005 :) (: Description: inserting an allowed attribute is fine :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ins-005 :) (: Description: inserting an allowed attribute is fine :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-vallax-ins-006,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ins-006 :) (: Description: inserting an xml:id doesn't work unless it's unique :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ins-006 :) (: Description: inserting an xml:id doesn't work unless it's unique :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-vallax-ins-007,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ins-007 :) (: Description: inserting a duplicate xml:id is fine if we get rid of the old one :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1], replace value of node id('jff001', $books)/@xml:id with "jff002"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ins-007 :) (: Description: inserting a duplicate xml:id is fine if we get rid of the old one :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1], replace value of node id('jff001', $books)/@xml:id with "jff002"
revalidate-vallax-ren-001,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ren-001 :) (: Description: renaming an element is bad news if the new name is not allowed :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1] as "WRITER"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ren-001 :) (: Description: renaming an element is bad news if the new name is not allowed :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1] as "WRITER"
revalidate-vallax-ren-002,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ren-002 :) (: Description: renaming an attribute is bad news if the new name is not allowed :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//ITEM)[1]/@CAT as "cat"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ren-002 :) (: Description: renaming an attribute is bad news if the new name is not allowed :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//ITEM)[1]/@CAT as "cat"
revalidate-vallax-ren-003,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-ren-003 :) (: Description: renaming an element is OK if the new name is in the substitution group :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $e in $books//ITEM   return rename node $e as "SUBITEM"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ren-003 :) (: Description: renaming an element is OK if the new name is in the substitution group :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $e in $books//ITEM   return rename node $e as "SUBITEM"
revalidate-vallax-repnode-001,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-repnode-001 :) (: Description: replace element fails if the new node is invalid :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-repnode-001 :) (: Description: replace element fails if the new node is invalid :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>
revalidate-vallax-repnode-002,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-repnode-002 :) (: Description: replace attribute fails if the new node is invalid :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//ITEM)[1]/@CAT with <A cat="mmc"/>/@cat". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-repnode-002 :) (: Description: replace attribute fails if the new node is invalid :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//ITEM)[1]/@CAT with <A cat="mmc"/>/@cat
revalidate-vallax-repnode-003,Error: XPST0003: Unable to parse XPath: "(: Name: vallax-repnode-003 :) (: Description: replace element is OK if the new node is valid :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <AUTHOR>Thursday Next</AUTHOR>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-repnode-003 :) (: Description: replace element is OK if the new node is valid :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <AUTHOR>Thursday Next</AUTHOR>
revalidation-declaration-03-fail,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-03 :) (: Description: One declare validation specifying lax :)  declare revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-03 :) (: Description: One declare validation specifying lax :)  declare [Error is around here]revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-05,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-05 :) (: Description: One declare validation specifying skip :)  declare revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-05 :) (: Description: One declare validation specifying skip :)  declare [Error is around here]revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-06,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-06 :) (: Description: Two declare validation specifying skip :)  declare revalidation skip; declare revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-06 :) (: Description: Two declare validation specifying skip :)  declare [Error is around here]revalidation skip; declare revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
removeType-valskip-ins-001,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-001 :) (: Description: insert before removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR>Jasper Fforde</AUTHOR> before ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-001 :) (: Description: insert before removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR>Jasper Fforde</AUTHOR> before ($books//AUTHOR)[1]
removeType-valskip-ins-002,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-002 :) (: Description: insert after removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR>Jasper Fforde</AUTHOR> after ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-002 :) (: Description: insert after removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR>Jasper Fforde</AUTHOR> after ($books//AUTHOR)[1]
removeType-valskip-ins-003,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-003 :) (: Description: insert into removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node "abc" into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-003 :) (: Description: insert into removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node "abc" into ($books//AUTHOR)[1]
removeType-valskip-ins-004,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-004 :) (: Description: insert as first into (of element node) removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <by/> as first into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-004 :) (: Description: insert as first into (of element node) removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <by/> as first into ($books//AUTHOR)[1]
removeType-valskip-ins-005,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-005 :) (: Description: insert as last into (of comment node) doesn't remove type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <!-- yes, really --> as last into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-005 :) (: Description: insert as last into (of comment node) doesn't remove type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <!-- yes, really --> as last into ($books//AUTHOR)[1]
removeType-valskip-ins-006,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-006 :) (: Description: insert attribute removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node attribute famous {"yes"} into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-006 :) (: Description: insert attribute removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node attribute famous {"yes"} into ($books//AUTHOR)[1]
removeType-valskip-ins-007,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-007 :) (: Description: with no validation, adding xsi:nil is not an error :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node attribute xsi:nil {"true"} into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-007 :) (: Description: with no validation, adding xsi:nil is not an error :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node attribute xsi:nil {"true"} into ($books//AUTHOR)[1]
removeType-valskip-ins-008,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-008 :) (: Description: with no validation, adding xml:id has is-ID property but not xs:ID type :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, insert node attribute xml:id {"unique"} into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-008 :) (: Description: with no validation, adding xml:id has is-ID property but not xs:ID type :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, insert node attribute xml:id {"unique"} into ($books//AUTHOR)[1]
removeType-valskip-ins-009,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-009 :) (: Description: with no validation, but construction mode preserve, inserted elements retain their type :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1] as last into $books//BOOKS". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-009 :) (: Description: with no validation, but construction mode preserve, inserted elements retain their type :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1] as last into $books//BOOKS
removeType-valskip-ins-010,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-010 :) (: Description: with no validation, but construction mode strip, inserted elements lose their type :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1] as last into $books//BOOKS". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-010 :) (: Description: with no validation, but construction mode strip, inserted elements lose their type :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1] as last into $books//BOOKS
removeType-valskip-ins-011,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-011 :) (: Description: with no validation, but construction mode preserve, inserted attributes retain their type :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1]/DIMENSIONS/@UNIT into $books//ITEM[1]/PRICE". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-011 :) (: Description: with no validation, but construction mode preserve, inserted attributes retain their type :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1]/DIMENSIONS/@UNIT into $books//ITEM[1]/PRICE
removeType-valskip-ins-012,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-012 :) (: Description: with no validation, but construction mode strip, inserted attributes lose their type :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1]/DIMENSIONS/@UNIT into $books//ITEM[1]/PRICE". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-012 :) (: Description: with no validation, but construction mode strip, inserted attributes lose their type :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1]/DIMENSIONS/@UNIT into $books//ITEM[1]/PRICE
removeType-valskip-ins-013,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-013 :) (: Description: with no validation, but construction mode preserve, adding an IDREF attribute affects result of idref() :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: evaluate idref() in case index is built lazily :) insert node attribute iii {count($books/idref('P'))} into $books/BOOKLIST, insert node $books//ITEM[1]/@CAT into $books//ITEM[1]/PRICE". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-013 :) (: Description: with no validation, but construction mode preserve, adding an IDREF attribute affects result of idref() :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: evaluate idref() in case index is built lazily :) insert node attribute iii {count($books/idref('P'))} into $books/BOOKLIST, insert node $books//ITEM[1]/@CAT into $books//ITEM[1]/PRICE
removeType-valskip-ins-014,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ins-014 :) (: Description: if input is untyped, it remains untyped after update :)  declare construction preserve; declare revalidation skip;  (: insert-start :) declare variable $users as document-node(element(users, xs:untyped)) external; (: insert-end :)  insert node <zzz/> into $users/users/user_tuple[1]/name". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-014 :) (: Description: if input is untyped, it remains untyped after update :)  declare construction preserve; declare [Error is around here]revalidation skip;  (: insert-start :) declare variable $users as document-node(element(users, xs:untyped)) external; (: insert-end :)  insert node <zzz/> into $users/users/user_tuple[1]/name
removeType-valskip-del-001,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-del-001 :) (: Description: deleting an element removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-001 :) (: Description: deleting an element removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]
removeType-valskip-del-002,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-del-002 :) (: Description: deleting an attribute removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//@UNIT)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-002 :) (: Description: deleting an attribute removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//@UNIT)
removeType-valskip-del-003,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-del-003 :) (: Description: deleting an xml:id attribute affects result of id() function :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, delete node ($books//@xml:id)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-003 :) (: Description: deleting an xml:id attribute affects result of id() function :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, delete node ($books//@xml:id)
removeType-valskip-del-004,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-del-004 :) (: Description: deleting a text node removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]/text()". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-004 :) (: Description: deleting a text node removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]/text()
removeType-valskip-del-005,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-del-005 :) (: Description: deleting a comment node does not remove type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete nodes $books//comment()". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-005 :) (: Description: deleting a comment node does not remove type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete nodes $books//comment()
removeType-valskip-ren-001,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ren-001 :) (: Description: renaming an element removes type from self and ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1] as "WRITER"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ren-001 :) (: Description: renaming an element removes type from self and ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1] as "WRITER"
removeType-valskip-ren-002,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ren-002 :) (: Description: renaming an attribute removes type from self and ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $n in $books//@UNIT return rename node $n as "units"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ren-002 :) (: Description: renaming an attribute removes type from self and ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $n in $books//@UNIT return rename node $n as "units"
removeType-valskip-ren-003,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ren-003 :) (: Description: renaming an xml:id attribute affects result of id() function :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, for $a in $books//@xml:id  return rename node $a as "ex-id"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ren-003 :) (: Description: renaming an xml:id attribute affects result of id() function :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, for $a in $books//@xml:id  return rename node $a as "ex-id"
removeType-valskip-ren-004,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ren-004 :) (: Description: renaming a text node is an error :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1]/text() as "text"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ren-004 :) (: Description: renaming a text node is an error :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1]/text() as "text"
removeType-valskip-ren-005,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-ren-005 :) (: Description: renaming a PI node does not remove type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $p in $books//processing-instruction(pi) return rename node $p as "theta"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ren-005 :) (: Description: renaming a PI node does not remove type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $p in $books//processing-instruction(pi) return rename node $p as "theta"
removeType-valskip-ren-006,Error: XPST0003: Unable to parse XPath: "(: valskip-ren-006 - two updates create conflicting namespace bindings, not detected until    upd:insert is executed, at which point it causes XUDY0024 :)     (: original test from Jan Cuypers, DataDirect, integrated by Michael Kay :)     declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $a := <ns1:a xmlns:ns1="http://ns1"><b/></ns1:a> return (     rename node $a as node-name(<ns2:a xmlns:ns2="http://ns2"/>),     insert node        <a xmlns:ns2="http://ns3" ns2:b="b"/>/@*:b   after $a/b )  ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: valskip-ren-006 - two updates create conflicting namespace bindings, not detected until    upd:insert is executed, at which point it causes XUDY0024 :)     (: original test from Jan Cuypers, DataDirect, integrated by Michael Kay :)     declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $a := <ns1:a xmlns:ns1="http://ns1"><b/></ns1:a> return (     rename node $a as node-name(<ns2:a xmlns:ns2="http://ns2"/>),     insert node        <a xmlns:ns2="http://ns3" ns2:b="b"/>/@*:b   after $a/b )
removeType-valskip-repnode-001,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-repnode-001 :) (: Description: replace element removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-001 :) (: Description: replace element removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>
removeType-valskip-repnode-002,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-repnode-002 :) (: Description: replace attribute removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//@UNIT)[1] with attribute {"units"} {"furlongs"}". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-002 :) (: Description: replace attribute removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//@UNIT)[1] with attribute {"units"} {"furlongs"}
removeType-valskip-repnode-003,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-repnode-003 :) (: Description: replace attribute retains type of attribute with construction preserve :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $d := validate strict {<DIMENSIONS UNIT="cm">12.3 1.0 2.0</DIMENSIONS>} return    replace node ($books//@UNIT)[1] with $d/@UNIT". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-003 :) (: Description: replace attribute retains type of attribute with construction preserve :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $d := validate strict {<DIMENSIONS UNIT="cm">12.3 1.0 2.0</DIMENSIONS>} return    replace node ($books//@UNIT)[1] with $d/@UNIT
removeType-valskip-repnode-004,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-repnode-004 :) (: Description: replacing an ID attribute with construction=strip drops the ID :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $old := id("P", $books)/@CODE return replace node ($books//CATEGORY)[1]/@CODE with attribute {"CODE"}{concat($old, "2")}". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-004 :) (: Description: replacing an ID attribute with construction=strip drops the ID :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $old := id("P", $books)/@CODE return replace node ($books//CATEGORY)[1]/@CODE with attribute {"CODE"}{concat($old, "2")}
removeType-valskip-repnode-005,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-repnode-005 :) (: Description: replacing an ID attribute with construction=preserve drops the old ID and creates a new one :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $old := id("P", $books)/@CODE  let $p2 := validate strict {<CATEGORY CODE="{$old}2" DESC=""/>} return replace node ($books//CATEGORY)[1]/@CODE with $p2/@CODE". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-005 :) (: Description: replacing an ID attribute with construction=preserve drops the old ID and creates a new one :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $old := id("P", $books)/@CODE  let $p2 := validate strict {<CATEGORY CODE="{$old}2" DESC=""/>} return replace node ($books//CATEGORY)[1]/@CODE with $p2/@CODE
removeType-valskip-repnode-006,Error: XPST0003: Unable to parse XPath: "(: Name: valskip-repnode-006 :) (: Description: replacing an IDREF attribute with construction=strip drops the old IDREF :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $old := count(idref("P", $books)) let $pref := validate strict {<DUMMYREF CATREF="P"/>} return (replace node ($books//ITEM)[2]/@CAT with $pref/@CATREF,         insert node comment{ $old } as first into $books)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-006 :) (: Description: replacing an IDREF attribute with construction=strip drops the old IDREF :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $old := count(idref("P", $books)) let $pref := validate strict {<DUMMYREF CATREF="P"/>} return (replace node ($books//ITEM)[2]/@CAT with $pref/@CATREF,         insert node comment{ $old } as first into $books)
revalidation-declaration-05-fail,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-05 :) (: Description: One declare validation specifying skip :)  declare revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-05 :) (: Description: One declare validation specifying skip :)  declare [Error is around here]revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidate-valtrans-ins-003,Error: XPST0003: Unable to parse XPath: "(: Name: valtrans-ins-003 :) (: Description: inserting a disallowed element is bad news; detected by revalidation defined    in prolog of library module :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books"; import module namespace m1 = "http://www.w3.org/xqupd/tests/ns/valtrans-ins-003" at "valtrans-ins-003-mod1.xq";     (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  m1:update($books)         ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valtrans-ins-003 :) (: Description: inserting a disallowed element is bad news; detected by revalidation defined    in prolog of library module :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books"; import module namespace m1 = "http://www.w3.org/xqupd/tests/ns/valtrans-ins-003" at "valtrans-ins-003-mod1.xq";     (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  m1:update($books)
stf-insert-01,Error: Should throw error XUTY0004.
stf-insert-02,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0004/
stf-insert-into-01,Error: Should throw error XUTY0005.
stf-insert-into-02,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0005/
stf-insert-into-03,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0005/
stf-insert-into-04,Error: Should throw error XUTY0022.
stf-insert-after-01,Error: Should throw error XUTY0006.
stf-insert-after-02,Error: Should throw error XUTY0006.
stf-insert-after-03,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0006/
stf-delete-01,Error: Should throw error XUTY0007.
stf-delete-02,Error: Should throw error XUTY0007.
stf-replace-node-01,Error: Should throw error XUTY0008.
stf-replace-node-02,Error: Should throw error XUTY0008.
stf-replace-node-03,Error: Should throw error XUTY0008.
stf-replace-node-04,Error: Should throw error XUTY0010.
stf-replace-node-05,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0010/
stf-replace-node-06,Error: Should throw error XUTY0011.
stf-replace-node-07,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUTY0011/
stf-replace-value-of-node-01,Error: Should throw error XUTY0008.
stf-replace-value-of-node-02,Error: Should throw error XUTY0008.
stf-rename-01,Error: Should throw error XUTY0012.
stf-rename-02,Error: Should throw error XUTY0012.
stf-rename-03,Error: Should throw error XUTY0012.
stf-rename-04,Error: Should throw error XPTY0004.
stf-transform-01,Error: Should throw error XUTY0013.
stf-transform-02,Error: Should throw error XUTY0013.
stf-transform-03,Error: Should throw error XUTY0013.
complex-replacevalues-q1,Error: XPTY0004 Unable to cast xs:string to type xs:string while calling substring
fn-put-003,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-003-fail,Error: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*)null, xs:anyAtomicTypenull, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*)null, xs:integernull, item()*)"?' to match /FOUP0001/
fn-put-004,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-004-fail,Error: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*)null, xs:anyAtomicTypenull, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*)null, xs:integernull, item()*)"?' to match /FOUP0001/
fn-put-005,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-005-fail,Error: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*)null, xs:anyAtomicTypenull, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*)null, xs:integernull, item()*)"?' to match /FOUP0001/
fn-put-006,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-006-fail,Error: expected 'No selector counterpart for: computedTextConstructor.' to match /FOUP0001/
relational-data-q2,Error: XPST0017: Function data with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}date (xs:anyAtomicType?)"?
relational-data-q3,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
relational-data-q5-1,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
relational-data-q5-2,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
relational-data-q6-1,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
relational-data-q6-2,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
relational-data-q7,Error: expected '<root><item_tuple>\n  <itemno>1002</itemno>\n  <description>Motorcycle</description>\n  <offered_by>U02</offered_by>\n  <start_date>1999-02-11</start_date>\n  <end_date>1999-03-15</end_date>\n  <reserve_price>500</reserve_price>\n <comment>This is a bargain !</comment><comment>This is a bargain !</comment></item_tuple></root>' to equal '<root><item_tuple>\n  <itemno>1002</itemno>\n  <description>Motorcycle</description>\n  <offered_by>U02</offered_by>\n  <start_date>1999-02-11</start_date>\n  <end_date>1999-03-15</end_date>\n  <reserve_price>500</reserve_price>\n <comment>This is a bargain !</comment></item_tuple></root>'
relational-data-q8,Error: XPST0017: Function data with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}date (xs:anyAtomicType?)"?
relational-data-q9,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
address-book-q1,Error: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to match /XUDY0017/
soap-q1,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
namespaces-q1,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
parts-q3-1,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
parts-q3-2,Error: XPST0003: Unable to parse XPath: "(: Test - parts-q3-2 :) (: Description - Update Use Case Parts Q3 - Alternate Solution:)  (: insert-start :) declare variable $part-tree external; declare variable $part-list external; (: insert-end :)  (:state-1-start :)  declare updating function               local:delete-subtree($p as element(part))   {       for $child in $part-list//part       where $p/@partid eq $child/@partof       return (         local:delete-subtree($child),         delete node $child       )   };  for $p in $part-list//part[@name="car"] return    local:delete-subtree($p)    (:state-1-end :)  ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Test - parts-q3-2 :) (: Description - Update Use Case Parts Q3 - Alternate Solution:)  (: insert-start :) declare variable $part-tree external; declare variable $part-list external; (: insert-end :)  (:state-1-start :)  declare [Error is around here]updating function               local:delete-subtree($p as element(part))   {       for $child in $part-list//part       where $p/@partid eq $child/@partof       return (         local:delete-subtree($child),         delete node $child       )   };  for $p in $part-list//part[@name="car"] return    local:delete-subtree($p)    (:state-1-end :)
parts-q6,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
nil-q1,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet