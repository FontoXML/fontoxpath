id-comma-expr-013,Child expressions are allowed to be updating in version 3.0
id-comma-expr-014,Child expressions are allowed to be updating in version 3.0
id-comma-expr-06,Child expressions are allowed to be updating in version 3.0
id-comma-expr-07,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-011,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-012,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-034,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-038,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-05,Child expressions are allowed to be updating in version 3.0
id-conditional-expr-06,Child expressions are allowed to be updating in version 3.0
id-delete-expr-06,Child expressions are allowed to be updating in version 3.0
id-insert-expr-023,Child expressions are allowed to be updating in version 3.0
id-insert-expr-024,Child expressions are allowed to be updating in version 3.0
id-insert-expr-025,Child expressions are allowed to be updating in version 3.0
id-rename-expr-06,Child expressions are allowed to be updating in version 3.0
id-transform-expr-012,Child expressions are allowed to be updating in version 3.0
id-transform-expr-013,Error XUST0002 is no longer available in version 3.0.
id-transform-expr-014,Child expressions are allowed to be updating in version 3.0
id-transform-expr-018,Error XUST0002 is no longer available in version 3.0.
id-function-declaration-05,Error: expected 'XUST0001: Updating expressions should be evaluated as updating expressions' to match /XUST0002/
id-function-declaration-012,Error: Should throw error XUST0002.
id-function-declaration-014,Error: Should throw error XUST0028. or Should throw error XUST0002.
id-function-declaration-016,Error: expected 'XPTY0004: Multiplicity of function argument of type element() for insertFunction is incorrect. Expected exactly one' to match /XUST0001/
function-declaration-03,Error: expected 'XUST0001: Updating expressions should be evaluated as updating expressions' to match /XUST0002/
id-replace-expr-011,Error: Should throw error XUST0001.
id-replace-expr-012,Error: expected 'XUDY0027: The target for an insert, replace, or rename expression expression should not be empty.' to match /XUST0001/
id-replace-expr-017,Error: Should throw error XUST0001.
id-replace-expr-018,Error: expected 'XUDY0027: The target for an insert, replace, or rename expression expression should not be empty.' to match /XUST0001/
id-typeswitch-expr-06,Error: Should throw error XUST0001.
id-typeswitch-expr-07,Error: Should throw error XUST0001.
id-typeswitch-expr-013,Error: Should throw error XUST0001.
id-typeswitch-expr-014,Error: Should throw error XUST0001.
id-typeswitch-expr-020,Error: Should throw error XUST0001.
id-typeswitch-expr-021,Error: Should throw error XUST0001.
id-typeswitch-expr-027,Error: expected 'XUDY0027: The target for an insert, replace, or rename expression expression should not be empty.' to match /XUST0001/
id-typeswitch-expr-028,Error: expected 'XUDY0027: The target for an insert, replace, or rename expression expression should not be empty.' to match /XUST0001/
id-typeswitch-expr-038,Error: Should throw error XUST0001.
id-conditional-expr-017,Error: Should throw error XUST0001.
id-conditional-expr-018,Error: Should throw error XUST0001.
id-conditional-expr-023,Error: Should throw error XUST0001.
id-conditional-expr-024,Error: expected 'XUDY0027: The target for an insert, replace, or rename expression expression should not be empty.' to match /XUST0001/
id-comma-expr-020,Error: Should throw error XUST0001.
id-comma-expr-021,Error: Should throw error XUST0001.
id-comma-expr-027,Error: Should throw error XUST0001.
id-comma-expr-028,Error: Should throw error XUST0001.
id-comma-expr-038,Error: Should throw error XUST0001.
id-function-call-01,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicType for insertFunction is incorrect. Expected exactly one' to match /XUST0001/
id-function-call-02,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicType for insertFunction is incorrect. Expected exactly one' to match /XUST0001/
id-function-call-03,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicType for replaceFunction is incorrect. Expected exactly one' to match /XUST0001/
id-function-call-04,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicType for renameFunction is incorrect. Expected exactly one' to match /XUST0001/
id-function-call-06,Error: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicType for renameFunction is incorrect. Expected exactly one' to match /XUST0001/
id-other-expr-032,Error: expected 'FORG0001: Cannot cast \n    Smith\n    100000\n   to xs:integer, pattern validation failed.' to match /XUST0001/
id-comma-expr-034,Error: Expected XPath (: Name: id-comma-expr-034 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: first expression is an updating expression and the second one is a mathematical expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=  $input-context/employees[1]/employee[2] return   (copy $newVar := $var modify delete node $newVar/salary[1] return $newVar, xs:integer(1) + xs:integer(2)) to resolve to a sequence of Nodes.
id-comma-expr-035,Error: Expected XPath (: Name: id-comma-expr-035 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: first expression is a mathematical expression and the second one is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[3] return   (xs:integer(1) + xs:integer(2), copy $newVar := $var modify delete node $newVar/salary[1] return $newVar) to resolve to a sequence of Nodes.
id-function-call-05,Error: Expected XPath (: Name: id-function-call-05 :) (: Description: Evaluation of a transform expression used with function declaration. :) (: the function call contains an "updating" (transform) expression :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare function     local:transformFunction($e as xs:anyAtomicType)     {    let $e1 := $e    return      $e1    };     let $arg1 := $input-context/employees[1]/employee[1] return   concat('"', local:transformFunction(copy $newVar := $arg1 modify delete node $newVar/salary[1] return $newVar), '"') to resolve to a sequence of Nodes.
=====================TESTS ABOVE HAVE BEEN MARKED MANUALLY=====================
id-function-declaration-04,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-function-declaration-017,Error: Error: an XML declaration must be at the start of the document.
function-declaration-02,Error: expected 'XPTY0004: Multiplicity of function return value of type xs:integer for test is incorrect. Expected exactly one' to match /XUST0028/
id-insert-expr-081,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-082,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-083,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-084,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-085,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-086,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-081-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-082-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-083-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-084-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-085-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-insert-expr-086-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
complex-deletes-q12,Error: Not implemented: orderByClause is not implemented yet.
id-replace-expr-045,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-replace-expr-045-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
complex-replacevalues-q11,Error: Not implemented: orderByClause is not implemented yet.
complex-replacevalues-q12,Error: Not implemented: orderByClause is not implemented yet.
id-rename-expr-033,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-034,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-033-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-034-no-inherit,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-035,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-036,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-rename-expr-037,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
complex-renames-q6,Error: Not implemented: orderByClause is not implemented yet.
complex-renames-q7,Error: Not implemented: orderByClause is not implemented yet.
complex-renames-q8,Error: Not implemented: orderByClause is not implemented yet.
id-transform-expr-06,Error: XUTY0013: The source expression of a copy modify expression must return a single node.
id-transform-expr-09,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-transform-expr-041,Error: Not supported: renaming detached nodes.
id-transform-expr-042,Error: Not Implemented: default namespace element.
id-transform-expr-043,Error: Not Implemented: default namespace element.
id-transform-expr-044,Error: Not Implemented: default namespace element.
id-transform-expr-045,Error: Not Implemented: default namespace element.
id-transform-expr-046,Error: Not Implemented: default namespace element.
id-transform-expr-047,Error: Not Implemented: default namespace element.
id-transform-expr-048,Error: Not Implemented: default namespace element.
id-transform-expr-049,Error: Not Implemented: default namespace element.
id-transform-expr-050,Error: Not Implemented: default namespace element.
id-transform-expr-051,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-052,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-053,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-transform-expr-054,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
id-flwor-expr-04,Error: expected 'Not implemented: orderByClause is not implemented yet.' to match /XUST0001/
id-flwor-expr-08,Error: expected 'Not implemented: orderByClause is not implemented yet.' to match /XUST0001/
id-flwor-expr-012,Error: expected 'Not implemented: orderByClause is not implemented yet.' to match /XUST0001/
id-flwor-expr-016,Error: expected 'Not implemented: orderByClause is not implemented yet.' to match /XUST0001/
id-flwor-expr-020,Error: Not implemented: orderByClause is not implemented yet.
id-typeswitch-expr-04,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-typeswitch-expr-05,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-typeswitch-expr-011,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-typeswitch-expr-012,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-typeswitch-expr-018,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-typeswitch-expr-019,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-typeswitch-expr-025,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-typeswitch-expr-026,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-typeswitch-expr-029,Error: XPST0008, The variable i is not in scope.
id-typeswitch-expr-032,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-typeswitch-expr-033,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-03,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-04,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-09,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-010,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-015,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-016,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-021,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-022,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-027,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-028,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-comma-expr-04,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-05,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-011,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-012,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-018,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-019,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-025,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-026,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-032,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
id-comma-expr-033,Error: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to match /FOER0000/
fn-put-001,Error: No selector counterpart for: computedDocumentConstructor.
fn-put-007,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /FOUP0002/
fn-put-008,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUST0001/
fn-put-009,Error: No selector counterpart for: computedDocumentConstructor.
fn-put-011,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /FODC0002/ or expected 'No selector counterpart for: computedDocumentConstructor.' to match /FODC0005/
fn-put-012,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUDY0031/
fn-put-013,Error: No selector counterpart for: computedDocumentConstructor.
fn-put-014,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUDY0031/
put-001,Error: XPST0017: Function put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?
fn-put-002,Error: XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?
fn-put-010,Error: XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?
namespace-errors-q9,Error: Should throw error XUDY0024.
namespace-errors-q10,Error: Should throw error XUDY0024.
namespace-errors-q14,Error: Should throw error XUDY0024.
namespace-errors-q15,Error: Should throw error XUDY0024.
mergeUpdates-001,Error: expected '<co3:employee xmlns:co3="http://www.example.com/company3" name="Jane Doe 1" gender="female" xmlns:co1="http://www.example.com/company1" co1:age="30">\n   <empnum>E1</empnum>\n   <pnum>P1</pnum>\n   <hours>40</hours>\n  </co3:employee>' to equal '<co3:employee name="Jane Doe 1" co2:gender="f" co1:age="30" xmlns:co1="http://www.example.com/company1" xmlns:co2="http://www.example.com/company2" xmlns:co3="http://www.example.com/company3">\n   <empnum>E1</empnum>\n   <pnum>P1</pnum>\n   <hours>40</hours>\n  </co3:employee>'
mergeUpdates-002,Error: Should throw error XUDY0024.
applyUpdates-013,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute name already exists.'
applyUpdates-014,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute name already exists.'
applyUpdates-016,Error: expected '<root>\n   E1\n   P1\n   40\n  </root>' to equal '<root><employee name="Jane Doe 1" gender="female">\n   <empnum>E1</empnum>\n   <pnum>P1</pnum>\n   <hours>40</hours>\n  </employee></root>'
applyUpdates-021,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute name already exists.'
applyUpdates-022,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute name already exists.'
applyUpdates-025,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute gender already exists.'
applyUpdates-026,Error: XUDY0021: Applying the updates will result in the XDM instance violating constraint: 'An attribute gender already exists.'
setToUntyped-001,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-002,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-003,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-004,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-005,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-006,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-007,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-008,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-009,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
setToUntyped-010,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces01,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces02,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces03,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces04,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces05,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
propagateNamespaces06,Error: Not implemented: only module imports, namespace declarations, and function declarations are implemented in XQuery modules
statictyp-xqupd-09,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0022/
statictyp-xqupd-10,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0006/
statictyp-xqupd-17,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0006/
statictyp-xqupd-18,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0006/
statictyp-xqupd-25,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0022/
statictyp-xqupd-26,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0008/
statictyp-xqupd-50,Error: expected 'No selector counterpart for: computedDocumentConstructor.' to match /XUTY0008/
revalidation-declaration-01,Error: XPST0003: Unable to parse: "(: Name: revalidation-declaration-01 :) (: Description: One declare validation specifying strict :)  declare revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-01 :) (: Description: One declare validation specifying strict :)  declare [Error is around here]revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-02,Error: expected 'XPST0003: Unable to parse: "(: Name: revalidation-declaration-02 :)\n(: Description: Two declare validation specifying strict :)\n\ndeclare revalidation strict;\ndeclare revalidation strict;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: revalidation-declaration-02 :)\n(: Description: Two declare validation specifying strict :)\n\ndeclare [Error is around here]revalidation strict;\ndeclare revalidation strict;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n' to match /XUST0003/
revalidate-valstrict-del-001,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-del-001 :)\n(: Description: deleting a mandatory element is bad news :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ndelete node ($books//AUTHOR)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-del-001 :)\n(: Description: deleting a mandatory element is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ndelete node ($books//AUTHOR)[1]' to match /XQDY0027/
revalidate-valstrict-del-002,Error: XPST0003: Unable to parse: "(: Name: valstrict-del-002 :) (: Description: deleting an optional element is perfectly OK :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//PRICE)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-del-002 :) (: Description: deleting an optional element is perfectly OK :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//PRICE)[1]
revalidate-valstrict-del-003,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-del-003 :)\n(: Description: deleting a mandatory attribute is bad news :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ndelete node ($books//ITEM[1]/@CAT)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-del-003 :)\n(: Description: deleting a mandatory attribute is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ndelete node ($books//ITEM[1]/@CAT)[1]' to match /XQDY0027/
revalidate-valstrict-del-004,Error: XPST0003: Unable to parse: "(: Name: valstrict-del-004 :) (: Description: deleting an optional attribute is fine :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM/@TAX)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-del-004 :) (: Description: deleting an optional attribute is fine :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM/@TAX)[1]
revalidate-valstrict-ins-001,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-ins-001 :)\n(: Description: inserting a disallowed element is bad news :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage>rubbish</garbage> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-ins-001 :)\n(: Description: inserting a disallowed element is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage>rubbish</garbage> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]' to match /XQDY0027/
revalidate-valstrict-ins-002,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-ins-002 :)\n(: Description: inserting a element that exceeds maxOccurs is bad news :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <TITLE xmlns="http://ns.example.com/books">rubbish</TITLE> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-ins-002 :)\n(: Description: inserting a element that exceeds maxOccurs is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <TITLE xmlns="http://ns.example.com/books">rubbish</TITLE> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]' to match /XQDY0027/
revalidate-valstrict-ins-003,Error: XPST0003: Unable to parse: "(: Name: valstrict-ins-003 :) (: Description: inserting a second AUTHOR is OK :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR> after ($books/BOOKLIST/BOOKS/ITEM/AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-003 :) (: Description: inserting a second AUTHOR is OK :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR> after ($books/BOOKLIST/BOOKS/ITEM/AUTHOR)[1]
revalidate-valstrict-ins-004,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-ins-004 :)\n(: Description: inserting a disallowed attribute is bad news :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage trash="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-ins-004 :)\n(: Description: inserting a disallowed attribute is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage trash="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]' to match /XQDY0027/
revalidate-valstrict-ins-005,Error: XPST0003: Unable to parse: "(: Name: valstrict-ins-005 :) (: Description: inserting an allowed attribute is fine :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-005 :) (: Description: inserting an allowed attribute is fine :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-valstrict-ins-006,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-ins-006 :)\n(: Description: inserting an xml:id doesn\'t work unless it\'s unique :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-ins-006 :)\n(: Description: inserting an xml:id doesn\'t work unless it\'s unique :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]' to match /XQDY0027/
revalidate-valstrict-ins-007,Error: XPST0003: Unable to parse: "(: Name: valstrict-ins-007 :) (: Description: inserting a duplicate xml:id is fine if we get rid of the old one :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1], replace value of node id('jff001', $books)/@xml:id with "jff002"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-007 :) (: Description: inserting a duplicate xml:id is fine if we get rid of the old one :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1], replace value of node id('jff001', $books)/@xml:id with "jff002"
revalidate-valstrict-ren-001,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-ren-001 :)\n(: Description: renaming an element is bad news if the new name is not allowed :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//AUTHOR)[1] as "WRITER"".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-ren-001 :)\n(: Description: renaming an element is bad news if the new name is not allowed :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//AUTHOR)[1] as "WRITER"' to match /XQDY0027/
revalidate-valstrict-ren-002,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-ren-002 :)\n(: Description: renaming an attribute is bad news if the new name is not allowed :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//ITEM)[1]/@CAT as "cat"".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-ren-002 :)\n(: Description: renaming an attribute is bad news if the new name is not allowed :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//ITEM)[1]/@CAT as "cat"' to match /XQDY0027/
revalidate-valstrict-ren-003,Error: XPST0003: Unable to parse: "(: Name: valstrict-ren-003 :) (: Description: renaming an element is OK if the new name is in the substitution group :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $e in $books//ITEM   return rename node $e as "SUBITEM"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ren-003 :) (: Description: renaming an element is OK if the new name is in the substitution group :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $e in $books//ITEM   return rename node $e as "SUBITEM"
revalidate-valstrict-repnode-001,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-repnode-001 :)\n(: Description: replace element fails if the new node is invalid :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nreplace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-repnode-001 :)\n(: Description: replace element fails if the new node is invalid :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nreplace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>' to match /XQDY0027/
revalidate-valstrict-repnode-002,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-repnode-002 :)\n(: Description: replace attribute fails if the new node is invalid :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nreplace node ($books//ITEM)[1]/@CAT with <A cat="mmc"/>/@cat".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-repnode-002 :)\n(: Description: replace attribute fails if the new node is invalid :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nreplace node ($books//ITEM)[1]/@CAT with <A cat="mmc"/>/@cat' to match /XQDY0027/
revalidate-valstrict-repnode-003,Error: XPST0003: Unable to parse: "(: Name: valstrict-repnode-003 :) (: Description: replace element is OK if the new node is valid :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <AUTHOR>Thursday Next</AUTHOR>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-repnode-003 :) (: Description: replace element is OK if the new node is valid :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <AUTHOR>Thursday Next</AUTHOR>
revalidate-valtrans-ins-001,Error: expected 'XPST0003: Unable to parse: "(: Name: valstrict-ins-001 :)\n(: Description: inserting a disallowed element is bad news :)\n\ndeclare construction strip;\ndeclare revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\nlet $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1]\nreturn \n  copy $book1copy := $book1\n  modify insert node <garbage>rubbish</garbage> as first into $book1copy\n  return $book1copy\n      ".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valstrict-ins-001 :)\n(: Description: inserting a disallowed element is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation strict;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\nlet $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1]\nreturn \n  copy $book1copy := $book1\n  modify insert node <garbage>rubbish</garbage> as first into $book1copy\n  return $book1copy\n      ' to match /XQDY0027/
revalidate-valtrans-ins-002,Error: XPST0003: Unable to parse: "(: Name: valstrict-ins-002 :) (: Description: inserting a permitted element is fine :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1] return    copy $book1copy := $book1   modify insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR>                  after ($book1copy/AUTHOR)[1]    return $book1copy       ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-002 :) (: Description: inserting a permitted element is fine :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1] return    copy $book1copy := $book1   modify insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR>                  after ($book1copy/AUTHOR)[1]    return $book1copy
revalidation-declaration-01-fail,Error: expected 'XPST0003: Unable to parse: "(: Name: revalidation-declaration-01 :)\n(: Description: One declare validation specifying strict :)\n\ndeclare revalidation strict;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: revalidation-declaration-01 :)\n(: Description: One declare validation specifying strict :)\n\ndeclare [Error is around here]revalidation strict;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n' to match /XUST0026/
revalidation-declaration-03,Error: XPST0003: Unable to parse: "(: Name: revalidation-declaration-03 :) (: Description: One declare validation specifying lax :)  declare revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-03 :) (: Description: One declare validation specifying lax :)  declare [Error is around here]revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-04,Error: expected 'XPST0003: Unable to parse: "(: Name: revalidation-declaration-04 :)\n(: Description: Two declare validation specifying lax :)\n\ndeclare revalidation lax;\ndeclare revalidation lax;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: revalidation-declaration-04 :)\n(: Description: Two declare validation specifying lax :)\n\ndeclare [Error is around here]revalidation lax;\ndeclare revalidation lax;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n' to match /XUST0003/
revalidate-vallax-del-001,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-del-001 :)\n(: Description: deleting a mandatory element is bad news :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ndelete node ($books//AUTHOR)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-del-001 :)\n(: Description: deleting a mandatory element is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ndelete node ($books//AUTHOR)[1]' to match /XQDY0027/
revalidate-vallax-del-002,Error: XPST0003: Unable to parse: "(: Name: vallax-del-002 :) (: Description: deleting an optional element is perfectly OK :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//PRICE)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-del-002 :) (: Description: deleting an optional element is perfectly OK :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//PRICE)[1]
revalidate-vallax-del-003,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-del-003 :)\n(: Description: deleting a mandatory attribute is bad news :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ndelete node ($books//ITEM[1]/@CAT)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-del-003 :)\n(: Description: deleting a mandatory attribute is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ndelete node ($books//ITEM[1]/@CAT)[1]' to match /XQDY0027/
revalidate-vallax-del-004,Error: XPST0003: Unable to parse: "(: Name: vallax-del-004 :) (: Description: deleting an optional attribute is fine :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM/@TAX)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-del-004 :) (: Description: deleting an optional attribute is fine :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//ITEM/@TAX)[1]
revalidate-vallax-ins-001,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-ins-001 :)\n(: Description: inserting a disallowed element is bad news :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage>rubbish</garbage> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-ins-001 :)\n(: Description: inserting a disallowed element is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage>rubbish</garbage> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]' to match /XQDY0027/
revalidate-vallax-ins-002,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-ins-002 :)\n(: Description: inserting a element that exceeds maxOccurs is bad news :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <TITLE xmlns="http://ns.example.com/books">rubbish</TITLE> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-ins-002 :)\n(: Description: inserting a element that exceeds maxOccurs is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <TITLE xmlns="http://ns.example.com/books">rubbish</TITLE> as first into ($books/BOOKLIST/BOOKS/ITEM)[1]' to match /XQDY0027/
revalidate-vallax-ins-003,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-ins-003 :)\n(: Description: inserting a second AUTHOR is OK :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR> after ($books/BOOKLIST/BOOKS/ITEM/AUTHOR)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-ins-003 :)\n(: Description: inserting a second AUTHOR is OK :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR> after ($books/BOOKLIST/BOOKS/ITEM/AUTHOR)[1]' to match /XUST0026/
revalidate-vallax-ins-004,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-ins-004 :)\n(: Description: inserting a disallowed attribute is bad news :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage trash="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-ins-004 :)\n(: Description: inserting a disallowed attribute is bad news :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage trash="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]' to match /XQDY0027/
revalidate-vallax-ins-005,Error: XPST0003: Unable to parse: "(: Name: vallax-ins-005 :) (: Description: inserting an allowed attribute is fine :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ins-005 :) (: Description: inserting an allowed attribute is fine :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="waste">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]
revalidate-vallax-ins-006,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-ins-006 :)\n(: Description: inserting an xml:id doesn\'t work unless it\'s unique :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-ins-006 :)\n(: Description: inserting an xml:id doesn\'t work unless it\'s unique :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\ninsert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1]' to match /XQDY0027/
revalidate-vallax-ins-007,Error: XPST0003: Unable to parse: "(: Name: vallax-ins-007 :) (: Description: inserting a duplicate xml:id is fine if we get rid of the old one :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1], replace value of node id('jff001', $books)/@xml:id with "jff002"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ins-007 :) (: Description: inserting a duplicate xml:id is fine if we get rid of the old one :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <garbage xml:id="jff001">rubbish</garbage>/@* as first into ($books/BOOKLIST/BOOKS/ITEM)[1], replace value of node id('jff001', $books)/@xml:id with "jff002"
revalidate-vallax-ren-001,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-ren-001 :)\n(: Description: renaming an element is bad news if the new name is not allowed :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//AUTHOR)[1] as "WRITER"".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-ren-001 :)\n(: Description: renaming an element is bad news if the new name is not allowed :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//AUTHOR)[1] as "WRITER"' to match /XQDY0027/
revalidate-vallax-ren-002,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-ren-002 :)\n(: Description: renaming an attribute is bad news if the new name is not allowed :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//ITEM)[1]/@CAT as "cat"".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-ren-002 :)\n(: Description: renaming an attribute is bad news if the new name is not allowed :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//ITEM)[1]/@CAT as "cat"' to match /XQDY0027/
revalidate-vallax-ren-003,Error: XPST0003: Unable to parse: "(: Name: vallax-ren-003 :) (: Description: renaming an element is OK if the new name is in the substitution group :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $e in $books//ITEM   return rename node $e as "SUBITEM"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-ren-003 :) (: Description: renaming an element is OK if the new name is in the substitution group :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $e in $books//ITEM   return rename node $e as "SUBITEM"
revalidate-vallax-repnode-001,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-repnode-001 :)\n(: Description: replace element fails if the new node is invalid :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nreplace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-repnode-001 :)\n(: Description: replace element fails if the new node is invalid :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nreplace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>' to match /XQDY0027/
revalidate-vallax-repnode-002,Error: expected 'XPST0003: Unable to parse: "(: Name: vallax-repnode-002 :)\n(: Description: replace attribute fails if the new node is invalid :)\n\ndeclare construction strip;\ndeclare revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nreplace node ($books//ITEM)[1]/@CAT with <A cat="mmc"/>/@cat".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: vallax-repnode-002 :)\n(: Description: replace attribute fails if the new node is invalid :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation lax;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nreplace node ($books//ITEM)[1]/@CAT with <A cat="mmc"/>/@cat' to match /XQDY0027/
revalidate-vallax-repnode-003,Error: XPST0003: Unable to parse: "(: Name: vallax-repnode-003 :) (: Description: replace element is OK if the new node is valid :)  declare construction strip; declare revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <AUTHOR>Thursday Next</AUTHOR>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: vallax-repnode-003 :) (: Description: replace element is OK if the new node is valid :)  declare construction strip; declare [Error is around here]revalidation lax; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <AUTHOR>Thursday Next</AUTHOR>
revalidation-declaration-03-fail,Error: expected 'XPST0003: Unable to parse: "(: Name: revalidation-declaration-03 :)\n(: Description: One declare validation specifying lax :)\n\ndeclare revalidation lax;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: revalidation-declaration-03 :)\n(: Description: One declare validation specifying lax :)\n\ndeclare [Error is around here]revalidation lax;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n' to match /XUST0026/
revalidation-declaration-05,Error: XPST0003: Unable to parse: "(: Name: revalidation-declaration-05 :) (: Description: One declare validation specifying skip :)  declare revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-05 :) (: Description: One declare validation specifying skip :)  declare [Error is around here]revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-06,Error: expected 'XPST0003: Unable to parse: "(: Name: revalidation-declaration-06 :)\n(: Description: Two declare validation specifying skip :)\n\ndeclare revalidation skip;\ndeclare revalidation skip;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: revalidation-declaration-06 :)\n(: Description: Two declare validation specifying skip :)\n\ndeclare [Error is around here]revalidation skip;\ndeclare revalidation skip;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n' to match /XUST0003/
removeType-valskip-ins-001,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-001 :) (: Description: insert before removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR>Jasper Fforde</AUTHOR> before ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-001 :) (: Description: insert before removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR>Jasper Fforde</AUTHOR> before ($books//AUTHOR)[1]
removeType-valskip-ins-002,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-002 :) (: Description: insert after removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR>Jasper Fforde</AUTHOR> after ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-002 :) (: Description: insert after removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <AUTHOR>Jasper Fforde</AUTHOR> after ($books//AUTHOR)[1]
removeType-valskip-ins-003,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-003 :) (: Description: insert into removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node "abc" into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-003 :) (: Description: insert into removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node "abc" into ($books//AUTHOR)[1]
removeType-valskip-ins-004,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-004 :) (: Description: insert as first into (of element node) removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <by/> as first into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-004 :) (: Description: insert as first into (of element node) removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <by/> as first into ($books//AUTHOR)[1]
removeType-valskip-ins-005,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-005 :) (: Description: insert as last into (of comment node) doesn't remove type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <!-- yes, really --> as last into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-005 :) (: Description: insert as last into (of comment node) doesn't remove type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node <!-- yes, really --> as last into ($books//AUTHOR)[1]
removeType-valskip-ins-006,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-006 :) (: Description: insert attribute removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node attribute famous {"yes"} into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-006 :) (: Description: insert attribute removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node attribute famous {"yes"} into ($books//AUTHOR)[1]
removeType-valskip-ins-007,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-007 :) (: Description: with no validation, adding xsi:nil is not an error :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node attribute xsi:nil {"true"} into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-007 :) (: Description: with no validation, adding xsi:nil is not an error :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   insert node attribute xsi:nil {"true"} into ($books//AUTHOR)[1]
removeType-valskip-ins-008,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-008 :) (: Description: with no validation, adding xml:id has is-ID property but not xs:ID type :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, insert node attribute xml:id {"unique"} into ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-008 :) (: Description: with no validation, adding xml:id has is-ID property but not xs:ID type :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, insert node attribute xml:id {"unique"} into ($books//AUTHOR)[1]
removeType-valskip-ins-009,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-009 :) (: Description: with no validation, but construction mode preserve, inserted elements retain their type :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1] as last into $books//BOOKS". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-009 :) (: Description: with no validation, but construction mode preserve, inserted elements retain their type :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1] as last into $books//BOOKS
removeType-valskip-ins-010,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-010 :) (: Description: with no validation, but construction mode strip, inserted elements lose their type :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1] as last into $books//BOOKS". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-010 :) (: Description: with no validation, but construction mode strip, inserted elements lose their type :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1] as last into $books//BOOKS
removeType-valskip-ins-011,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-011 :) (: Description: with no validation, but construction mode preserve, inserted attributes retain their type :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1]/DIMENSIONS/@UNIT into $books//ITEM[1]/PRICE". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-011 :) (: Description: with no validation, but construction mode preserve, inserted attributes retain their type :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1]/DIMENSIONS/@UNIT into $books//ITEM[1]/PRICE
removeType-valskip-ins-012,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-012 :) (: Description: with no validation, but construction mode strip, inserted attributes lose their type :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1]/DIMENSIONS/@UNIT into $books//ITEM[1]/PRICE". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-012 :) (: Description: with no validation, but construction mode strip, inserted attributes lose their type :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  insert node $books//ITEM[1]/DIMENSIONS/@UNIT into $books//ITEM[1]/PRICE
removeType-valskip-ins-013,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-013 :) (: Description: with no validation, but construction mode preserve, adding an IDREF attribute affects result of idref() :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: evaluate idref() in case index is built lazily :) insert node attribute iii {count($books/idref('P'))} into $books/BOOKLIST, insert node $books//ITEM[1]/@CAT into $books//ITEM[1]/PRICE". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-013 :) (: Description: with no validation, but construction mode preserve, adding an IDREF attribute affects result of idref() :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: evaluate idref() in case index is built lazily :) insert node attribute iii {count($books/idref('P'))} into $books/BOOKLIST, insert node $books//ITEM[1]/@CAT into $books//ITEM[1]/PRICE
removeType-valskip-ins-014,Error: XPST0003: Unable to parse: "(: Name: valskip-ins-014 :) (: Description: if input is untyped, it remains untyped after update :)  declare construction preserve; declare revalidation skip;  (: insert-start :) declare variable $users as document-node(element(users, xs:untyped)) external; (: insert-end :)  insert node <zzz/> into $users/users/user_tuple[1]/name". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ins-014 :) (: Description: if input is untyped, it remains untyped after update :)  declare construction preserve; declare [Error is around here]revalidation skip;  (: insert-start :) declare variable $users as document-node(element(users, xs:untyped)) external; (: insert-end :)  insert node <zzz/> into $users/users/user_tuple[1]/name
removeType-valskip-del-001,Error: XPST0003: Unable to parse: "(: Name: valskip-del-001 :) (: Description: deleting an element removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-001 :) (: Description: deleting an element removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]
removeType-valskip-del-002,Error: XPST0003: Unable to parse: "(: Name: valskip-del-002 :) (: Description: deleting an attribute removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//@UNIT)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-002 :) (: Description: deleting an attribute removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//@UNIT)
removeType-valskip-del-003,Error: XPST0003: Unable to parse: "(: Name: valskip-del-003 :) (: Description: deleting an xml:id attribute affects result of id() function :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, delete node ($books//@xml:id)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-003 :) (: Description: deleting an xml:id attribute affects result of id() function :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, delete node ($books//@xml:id)
removeType-valskip-del-004,Error: XPST0003: Unable to parse: "(: Name: valskip-del-004 :) (: Description: deleting a text node removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]/text()". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-004 :) (: Description: deleting a text node removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete node ($books//AUTHOR)[1]/text()
removeType-valskip-del-005,Error: XPST0003: Unable to parse: "(: Name: valskip-del-005 :) (: Description: deleting a comment node does not remove type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete nodes $books//comment()". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-del-005 :) (: Description: deleting a comment node does not remove type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   delete nodes $books//comment()
removeType-valskip-ren-001,Error: XPST0003: Unable to parse: "(: Name: valskip-ren-001 :) (: Description: renaming an element removes type from self and ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1] as "WRITER"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ren-001 :) (: Description: renaming an element removes type from self and ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   rename node ($books//AUTHOR)[1] as "WRITER"
removeType-valskip-ren-002,Error: XPST0003: Unable to parse: "(: Name: valskip-ren-002 :) (: Description: renaming an attribute removes type from self and ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $n in $books//@UNIT return rename node $n as "units"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ren-002 :) (: Description: renaming an attribute removes type from self and ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $n in $books//@UNIT return rename node $n as "units"
removeType-valskip-ren-003,Error: XPST0003: Unable to parse: "(: Name: valskip-ren-003 :) (: Description: renaming an xml:id attribute affects result of id() function :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, for $a in $books//@xml:id  return rename node $a as "ex-id"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ren-003 :) (: Description: renaming an xml:id attribute affects result of id() function :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  (: we call the id() function in case the implementation builds ID indexes lazily :) insert node attribute ids {count($books/id('jff001'))} into $books/BOOKLIST, for $a in $books//@xml:id  return rename node $a as "ex-id"
removeType-valskip-ren-004,Error: expected 'XPST0003: Unable to parse: "(: Name: valskip-ren-004 :)\n(: Description: renaming a text node is an error :)\n\ndeclare construction strip;\ndeclare revalidation skip;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//AUTHOR)[1]/text() as "text"".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valskip-ren-004 :)\n(: Description: renaming a text node is an error :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation skip;\nimport schema default element namespace "http://ns.example.com/books";\n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\n\nrename node ($books//AUTHOR)[1]/text() as "text"' to match /XUTY0012/
removeType-valskip-ren-005,Error: XPST0003: Unable to parse: "(: Name: valskip-ren-005 :) (: Description: renaming a PI node does not remove type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $p in $books//processing-instruction(pi) return rename node $p as "theta"". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-ren-005 :) (: Description: renaming a PI node does not remove type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   for $p in $books//processing-instruction(pi) return rename node $p as "theta"
removeType-valskip-repnode-001,Error: XPST0003: Unable to parse: "(: Name: valskip-repnode-001 :) (: Description: replace element removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-001 :) (: Description: replace element removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//AUTHOR)[1] with <WRITER>Jasper Fforde</WRITER>
removeType-valskip-repnode-002,Error: XPST0003: Unable to parse: "(: Name: valskip-repnode-002 :) (: Description: replace attribute removes type from ancestors :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//@UNIT)[1] with attribute {"units"} {"furlongs"}". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-002 :) (: Description: replace attribute removes type from ancestors :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   replace node ($books//@UNIT)[1] with attribute {"units"} {"furlongs"}
removeType-valskip-repnode-003,Error: XPST0003: Unable to parse: "(: Name: valskip-repnode-003 :) (: Description: replace attribute retains type of attribute with construction preserve :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $d := validate strict {<DIMENSIONS UNIT="cm">12.3 1.0 2.0</DIMENSIONS>} return    replace node ($books//@UNIT)[1] with $d/@UNIT". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-003 :) (: Description: replace attribute retains type of attribute with construction preserve :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $d := validate strict {<DIMENSIONS UNIT="cm">12.3 1.0 2.0</DIMENSIONS>} return    replace node ($books//@UNIT)[1] with $d/@UNIT
removeType-valskip-repnode-004,Error: XPST0003: Unable to parse: "(: Name: valskip-repnode-004 :) (: Description: replacing an ID attribute with construction=strip drops the ID :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $old := id("P", $books)/@CODE return replace node ($books//CATEGORY)[1]/@CODE with attribute {"CODE"}{concat($old, "2")}". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-004 :) (: Description: replacing an ID attribute with construction=strip drops the ID :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $old := id("P", $books)/@CODE return replace node ($books//CATEGORY)[1]/@CODE with attribute {"CODE"}{concat($old, "2")}
removeType-valskip-repnode-005,Error: XPST0003: Unable to parse: "(: Name: valskip-repnode-005 :) (: Description: replacing an ID attribute with construction=preserve drops the old ID and creates a new one :)  declare construction preserve; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $old := id("P", $books)/@CODE  let $p2 := validate strict {<CATEGORY CODE="{$old}2" DESC=""/>} return replace node ($books//CATEGORY)[1]/@CODE with $p2/@CODE". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-005 :) (: Description: replacing an ID attribute with construction=preserve drops the old ID and creates a new one :)  declare construction preserve; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $old := id("P", $books)/@CODE  let $p2 := validate strict {<CATEGORY CODE="{$old}2" DESC=""/>} return replace node ($books//CATEGORY)[1]/@CODE with $p2/@CODE
removeType-valskip-repnode-006,Error: XPST0003: Unable to parse: "(: Name: valskip-repnode-006 :) (: Description: replacing an IDREF attribute with construction=strip drops the old IDREF :)  declare construction strip; declare revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $old := count(idref("P", $books)) let $pref := validate strict {<DUMMYREF CATREF="P"/>} return (replace node ($books//ITEM)[2]/@CAT with $pref/@CATREF,         insert node comment{ $old } as first into $books)". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found. (: Name: valskip-repnode-006 :) (: Description: replacing an IDREF attribute with construction=strip drops the old IDREF :)  declare construction strip; declare [Error is around here]revalidation skip; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)   let $old := count(idref("P", $books)) let $pref := validate strict {<DUMMYREF CATREF="P"/>} return (replace node ($books//ITEM)[2]/@CAT with $pref/@CATREF,         insert node comment{ $old } as first into $books)
revalidation-declaration-05-fail,Error: expected 'XPST0003: Unable to parse: "(: Name: revalidation-declaration-05 :)\n(: Description: One declare validation specifying skip :)\n\ndeclare revalidation skip;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: revalidation-declaration-05 :)\n(: Description: One declare validation specifying skip :)\n\ndeclare [Error is around here]revalidation skip;\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n12\n' to match /XUST0026/
revalidate-valtrans-ins-003,Error: expected 'XPST0003: Unable to parse: "(: Name: valtrans-ins-003 :)\n(: Description: inserting a disallowed element is bad news; detected by revalidation defined\n   in prolog of library module :)\n\ndeclare construction strip;\ndeclare revalidation skip;\nimport schema default element namespace "http://ns.example.com/books";\nimport module namespace m1 = "http://www.w3.org/xqupd/tests/ns/valtrans-ins-003" at "valtrans-ins-003-mod1.xq";   \n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\nm1:update($books)\n\n\n      ".\nExpected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "updating", "variable", "|", "||", or end of input but "r" found.\n(: Name: valtrans-ins-003 :)\n(: Description: inserting a disallowed element is bad news; detected by revalidation defined\n   in prolog of library module :)\n\ndeclare construction strip;\ndeclare [Error is around here]revalidation skip;\nimport schema default element namespace "http://ns.example.com/books";\nimport module namespace m1 = "http://www.w3.org/xqupd/tests/ns/valtrans-ins-003" at "valtrans-ins-003-mod1.xq";   \n\n(: insert-start :)\ndeclare variable $books as document-node(schema-element(BOOKLIST)) external;\n(: insert-end :)\n\nm1:update($books)\n\n\n      ' to match /XQDY0027/
stf-insert-01,Error: Should throw error XUTY0004.
stf-insert-02,Error: Should throw error XUTY0004.
stf-insert-into-01,Error: Should throw error XUTY0005.
stf-insert-into-02,Error: Should throw error XUTY0005.
stf-insert-into-03,Error: Should throw error XUTY0005.
stf-insert-into-04,Error: Should throw error XUTY0022.
stf-insert-after-01,Error: Should throw error XUTY0006.
stf-insert-after-02,Error: Should throw error XUTY0006.
stf-insert-after-03,Error: Should throw error XUTY0006.
stf-delete-01,Error: Should throw error XUTY0007.
stf-delete-02,Error: Should throw error XUTY0007.
stf-replace-node-01,Error: Should throw error XUTY0008.
stf-replace-node-02,Error: Should throw error XUTY0008.
stf-replace-node-03,Error: Should throw error XUTY0008.
stf-replace-node-04,Error: Should throw error XUTY0010.
stf-replace-node-05,Error: Should throw error XUTY0010.
stf-replace-node-06,Error: Should throw error XUTY0011.
stf-replace-node-07,Error: Should throw error XUTY0011.
stf-replace-value-of-node-01,Error: Should throw error XUTY0008.
stf-replace-value-of-node-02,Error: Should throw error XUTY0008.
stf-rename-01,Error: Should throw error XUTY0012.
stf-rename-02,Error: Should throw error XUTY0012.
stf-rename-03,Error: Should throw error XUTY0012.
stf-rename-04,Error: Should throw error XPTY0004.
stf-transform-01,Error: Should throw error XUTY0013.
stf-transform-02,Error: Should throw error XUTY0013.
stf-transform-03,Error: Should throw error XUTY0013.
fn-put-003,Error: XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?
fn-put-003-fail,Error: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?' to match /FOUP0001/
fn-put-004,Error: XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?
fn-put-004-fail,Error: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?' to match /FOUP0001/
fn-put-005,Error: XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?
fn-put-005-fail,Error: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?' to match /FOUP0001/
fn-put-006,Error: XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?
fn-put-006-fail,Error: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*), xs:anyAtomicType, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*), xs:integer, item()*)"?' to match /FOUP0001/
relational-data-q5-2,Error: expected '<root><bid_tuple><userid>U07</userid><itemno>1007</itemno><bid>247.50000000000003</bid><bid_date>1999-02-01</bid_date></bid_tuple></root>' to equal '<root><bid_tuple><userid>U07</userid><itemno>1007</itemno><bid>247.5</bid><bid_date>1999-02-01</bid_date></bid_tuple></root>'
relational-data-q7,Error: expected '<root><item_tuple>\n  <itemno>1002</itemno>\n  <description>Motorcycle</description>\n  <offered_by>U02</offered_by>\n  <start_date>1999-02-11</start_date>\n  <end_date>1999-03-15</end_date>\n  <reserve_price>500</reserve_price>\n <comment>This is a bargain !</comment><comment>This is a bargain !</comment></item_tuple></root>' to equal '<root><item_tuple>\n  <itemno>1002</itemno>\n  <description>Motorcycle</description>\n  <offered_by>U02</offered_by>\n  <start_date>1999-02-11</start_date>\n  <end_date>1999-03-15</end_date>\n  <reserve_price>500</reserve_price>\n <comment>This is a bargain !</comment></item_tuple></root>'
relational-data-q8,Error: Expected XPath (: Test - relational-data-q8 :) (: Description - Update Use Case #8  :)  (: insert-start :) declare variable $users external; declare variable $bids external; (: insert-end :)  let $uid := $users/users/user_tuple[name="Annabel Lee"]/userid return fn:count(($bids/bids/bid_tuple[userid=$uid])) to resolve to a sequence of Nodes.
relational-data-q9,Error: Expected XPath (: Test - relational-data-q9 :) (: Description - Update Use Case #9  :)  (: insert-start :) declare variable $users external; declare variable $bids external; (: insert-end :)  let $uid := $users/users/user_tuple[name="Annabel Lee"]/userid return fn:count(($bids/bids/bid_tuple[userid=$uid])) to resolve to a sequence of Nodes.
soap-q1,Error: expected '<root><env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"> \n <env:Header>\n  <m:reservation xmlns:m="http://travelcompany.example.org/reservation" env:role="http://www.w3.org/2003/05/soap-envelope/role/next" env:mustUnderstand="true">\n   <m:reference>uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d\n   </m:reference>\n   <m:dateAndTime>2007-08-16T22:57:20+01:00</m:dateAndTime>\n  </m:reservation>\n  <n:passenger xmlns:n="http://mycompany.example.com/employees" env:role="http://www.w3.org/2003/05/soap-envelope/role/next" env:mustUnderstand="true">\n   <n:name>�ke J�gvan �yvind</n:name>\n  </n:passenger>\n </env:Header>\n <env:Body><p:itineraryClarification xmlns:p="http://travelcompany.example.org/reservation/travel"><p:departure><p:departing><airportChoices>JFK   LGA   EWR  </airportChoices></p:departing><p:arriving/></p:departure><p:return><p:departing/><p:arriving><airportChoices>JFK   LGA   EWR  </airportChoices></p:arriving></p:return></p:itineraryClarification></env:Body>\n</env:Envelope></root>' to equal '<root><env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"> \n <env:Header>\n  <m:reservation xmlns:m="http://travelcompany.example.org/reservation" env:mustUnderstand="true" env:role="http://www.w3.org/2003/05/soap-envelope/role/next">\n   <m:reference>uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d\n   </m:reference>\n   <m:dateAndTime>2007-08-16T22:57:20+01:00</m:dateAndTime>\n  </m:reservation>\n  <n:passenger xmlns:n="http://mycompany.example.com/employees" env:mustUnderstand="true" env:role="http://www.w3.org/2003/05/soap-envelope/role/next">\n   <n:name>Åke Jógvan Øyvind</n:name>\n  </n:passenger>\n </env:Header>\n <env:Body><p:itineraryClarification xmlns:p="http://travelcompany.example.org/reservation/travel"><p:departure><p:departing><airportChoices>JFK   LGA   EWR  </airportChoices></p:departing><p:arriving/></p:departure><p:return><p:departing/><p:arriving><airportChoices>JFK   LGA   EWR  </airportChoices></p:arriving></p:return></p:itineraryClarification></env:Body>\n</env:Envelope></root>'
nil-q1,NamespaceError: NamespaceError: Qualified name with prefix can not have a null namespace